b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOMP474/6741 Intelligent Systems (Winter 2021)\n\nWorksheet #1: Knowledge Graphs\n\nTask 1. We start by modeling some university-related knowledge in form of a graph: (1) Joe studies at\nConcordia University; (2) Joe knows Jane; (3) Jane studies at McGill University. Draw the graph:\n\nTask 2. Let\xe2\x80\x99s add some additional knowledge: (4) Joe\xe2\x80\x99s email address is joe@example.com; (5)\nConcordia is located in Montreal; (6) McGill is located in Montreal. Add these to the graph above.\n\nTask 3. Graphs can be represented as triples (and vice versa), consisting of\n<subject> <predicate> <object>\n\nWrite the triples corresponding to the first three statements above:\n\n1.\n\n2.\n\n3.\n\nTask 4. Here\xe2\x80\x99s another triple: (Joe, is a, Person). Add it to the graph you drew in Task 1.\n\nTask 5. So far, we defined everything in terms of natural language. That\xe2\x80\x99s not very useful for a\xc3\x8f\nknowledge base to be used in an intelligent system. Rather than writing \xe2\x80\x9cConcordia\xe2\x80\x9d, we will use a URL\nthat points to a machine-readable description in the RDF (Resource Description Framework) format.\nUsing your phone or laptop, look up (our) Concordia University in the open knowledge base DBpedia\n(http://dbpedia.org):1\n\n\xe2\x80\xa2 URL:\n\n1What you see in your browser is actually a human-readable web page obtained through a HTTP 303 redirect, not the\nraw RDF data that would be consumed by a program.\n\nhttp://dbpedia.org\n\n\nCOMP474/6741 Worksheet: Knowledge Graphs Winter 2021\n\nTask 6. Ok, now let\xe2\x80\x99s go back to the graph from Task 1. Replace the string \xe2\x80\x9cConcordia\xe2\x80\x9d with the\nURL you obtained in the previous step in your graph above. Note: To obtain a complete RDF graph,\nyou\xe2\x80\x99d have to continue replacing all subjects, predicates and objects (except literals) with URLs.\n\nTask 7. DBpedia contains (among other information) the link to Concordia\xe2\x80\x99s homepage. Find the\xc3\x8f\ninformation and write it in form of a triple:\n\n\xe2\x80\xa2\n\nNow add this triple to the graph from Task 1.\n\nTask 8. What about our Joe and Jane? Unlike some famous persons, we will most likely not find them\nin DBpedia (or any other public knowledge graph). However, an organization might have them in their\nown graph (for example, in Facebook, LinkedIn, or Concordia\xe2\x80\x99s student database). For this example, we\nsimply name them as http://example.org/joe#me (likewise for Jane). How do we model the predicate\nthat Joe knows Jane in a machine-readable way? The details will be the topic of the next lecture; for\nnow simply use the URI http://xmlns.com/foaf/0.1/knows. Re-write the triple (2) from Task 1 using\nthree URIs:\n\n\xe2\x80\xa2\n\nObserve how an intelligent agent can now learn more about each part of this triple simply by resolving\nthe URI and reading the RDF data retrieved through it.\n\nTask 9. Writing these full URIs (technically IRIs) is tiring (and uses up storage space). Using the\nfollowing prefixes:\n\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nPREFIX user: <http://example.org/>\n\nre-write the triple from Task 8:\n\n\xe2\x80\xa2\n\nTask 10. Given the knowledge graph you constructed, can an intelligent agent answer the question\n\xe2\x80\x9cWhich city is Joe studying in?\xe2\x80\x9d? If yes, how? If no, why not?\n\nTo learn more about the technical details, see the references provided in the lecture, in particular\nhttps://www.w3.org/TR/rdf11-primer/\n\nhttps://www.w3.org/TR/rdf11-primer/\n\n'