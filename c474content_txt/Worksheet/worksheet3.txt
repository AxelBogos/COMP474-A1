b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOMP474/6741 Intelligent Systems (Winter 2021)\n\nWorksheet #3: Knowledge Base Queries with SPARQL\n\nTask 1. Quick refresher: Write two RDF Schema triples in Turtle format that 1. define a new class\nex:Professor that is 2. a subclass of foaf:Person (you can use namespace abbreviations for foaf, rdf\nand rdfs):\n\n1.\n\n2.\n\nTask 2. Add another triple stating that ex:Rene is a ex:Professor:\n\nTogether with the triples above, a system can infer another triple. What is this triple and where does it\ncome from?\n\nTask 3. How is Concordia University in the DBpedia knowledge graph linked to Wikidata? Find the\xc3\x8f\nproperty and object for:\n<http://dbpedia.org/resource/Concordia University>\n\nTask 4. Your first SPARQL query: What can you find in DBpedia with\xc3\x8f\nSELECT ?o\n\nWHERE {\n\n<http://dbpedia.org/resource/Concordia_University>\n\n<http://dbpedia.org/ontology/city> ?o\n\n}\n\nYou can run this query using DBpedia\xe2\x80\x99s public SPARQL endpoint at https://dbpedia.org/sparql/.\n\nTask 5. Let\xe2\x80\x99s try out DESCRIBE: Can you explain the result from\xc3\x8f\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\n\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nDESCRIBE ?s\n\nWHERE { ?s geo:lat "45.497002"^^xsd:float .\n\n?s geo:long "-73.578003"^^xsd:float . }\n\nNote that we started using prefix abbreviations, similar to Turtle.\n\nhttp://dbpedia.org/resource/Concordia_University\nhttps://dbpedia.org/sparql/\n\n\nCOMP474/6741 Worksheet: Knowledge Base Queries with SPARQL Winter 2021\n\nTask 6. Now find all predicates and objects that have dbr:Concordia University as the subject :\xc3\x8f\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT . . .\n\nWHERE {\n\n. . .\n\n}\n\nHint: the subject URI is given and you need variables for the predicate and the object.\n\nTask 7. Ok, something a bit more challenging: Create a query that prints out the names and optionally\xc3\x8f\nthe homepages of all universities located in Montreal:\n\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?uname ?uhomepage\n\nWHERE {\n\n. . .\n\n}\n\nHint: you can start from Concordia\xe2\x80\x99s URI and look for the right values to put into the query pattern.\n\nTask 8. Using a FILTER, find all universities in Montreal that have more than 10000 students\xc3\x8f\n(dbo:numberOfStudents):\n\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT ?uni ?num\n\nWHERE {\n\n. . .\n\nFILTER\n\n}\n\nBonus task: sort the output by the number of students (you\xe2\x80\x99ll need an ORDER BY clause).\n\nTask 9. If you ask Eliza, \xe2\x80\x9cIs the Yangtze river longer than the Nile River?\xe2\x80\x9d, you\xe2\x80\x99ll get a passive-aggressive\xc3\x8f\nanswer like \xe2\x80\x9cI\xe2\x80\x99ll ask the questions, if you don\xe2\x80\x99t mind!\xe2\x80\x9d. Can you do better by writing a SPARQL ASK query\nfor the DBpedia knowledge graph?\n\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nASK\n\n{\n\n. . .\n\n}\n\nHint: the URIs for the two rivers are dbr:Yangtze and dbr:Nile. Find the property for the length, bind\neach value to a variable and add a FILTER to check if one is bigger than the other.\n\n\n'