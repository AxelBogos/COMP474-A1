b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOMP474/6741 Intelligent Systems (Winter 2021)\n\nWorksheet #5: Recommender Systems\n\nTask 1. Let\xe2\x80\x99s take some movies that have been #tagged (or categorized) as follows:\n\nAction Comedy Sci-Fi Horror Drama Romance length\n\nMovie 1 4 8 6 3 0 0\n\nMovie 2 0 5 0 8 5 0\n\nMovie 3 1 4 0 3 0 10\n\nSo, each movie becomes a 6-dimensional vector of tags ti, e.g.,\n\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x86\x92\nMovie1 = \xe3\x80\x884, 8, 6, 3, 0, 0\xe3\x80\x89. Compute the length\n\nof each movie vector, which is defined as ||~m|| =\n\xe2\x88\x9a\nt21 + . . . + t\n\n2\nn (rounded to two digits).\n\nTask 2. Now you can normalize the vectors, by dividing the raw count of each tag ti by the length\nti\n\n||~m|| :\n\nAction Comedy Sci-Fi Horror Drama Romance\n\nMovie 1\n\nMovie 2\n\nMovie 3\n\nUse 4 significant digits for this table (protip: the length of each movie vector must now be 1).\n\nTask 3. We can now compute the similarity between the movies by computing their cosine similarity. Since\nthe vectors are normalized, this is simply their dot product: sim(~m,~n) = cos(~m,~n) = ~m \xc2\xb7 ~n =\n\n\xe2\x88\x91\nimi \xc2\xb7 ni:\n\nMovie 1 Movie 2 Movie 3\n\nMovie 1 1\n\nMovie 2 1\n\nMovie 3 1\n\nThis is the information we need for an item-to-item recommendation engine: Now we can answer the question,\nwhich movie is interesting to (buy, watch) for a customer who (bought, watched) Movie 1?\n\nTask 4. Now we want to personalize the recommendations. We collected the following profiles about the\nmovies watched (bought) by our users in the past:\n\nAction Comedy Sci-Fi Horror Drama Romance length\n\nJane 1 2 1 1 1 0\n\nJoe 0 1 0 1 0 1\n\nCompute the length of each user vector and normalize it like before:\n\nAction Comedy Sci-Fi Horror Drama Romance\n\nJane\n\nJoe\n\nTask 5. Now we can answer the question which movie a user is interested in. Compute the cosine similarity\nbetween the user vectors and the movie vectors:\n\nMovie 1 Movie 2 Movie 3\n\nJane\n\nJoe\n\n\n\nCOMP474/6741 Worksheet: Recommender Systems Winter 2021\n\nTask 6. Consider the results from three different recommender systems below: Here, X1\xe2\x80\x93X5 are the items\n(movies, photos, songs, . . . ) that the systems should have recommended as relevant for a specific user. The\nremaining 495 instances are not relevant for the user. A checkmark indicates that a system recommended\nthis item to the user:\n\nEvaluate the performance of the three systems using the measures Precision and Recall :\n\nPrecision Recall\n\nsystem 1\n\nsystem 2\n\nsystem 3\n\nTask 7. Based on the output below, compute precision@k = 1\nk\n\xc2\xb7\n\nk\xe2\x88\x91\nc=1\n\nrel(c) for the three recommender\n\nsystems (for k = 1, 2, 3):\n\nrel(k) precision@k\n\n1 2 3 1 2 3 AP@3\n\nsystem 1 1 0 0\n\nsystem 2 0 1 0\n\nsystem 3 0 0 1\n\nThat is, each system got exactly one recommendation right, but in a different position.\n\nTask 8. Moving on to the average precision, AP @N = 1\nm\n\nN\xe2\x88\x91\nk=1\n\nprecision@k \xc2\xb7rel(k). Compute the AP@3 and\n\nadd it to the table above. Here, assume m = 3 (i.e., there could have been 3 correct recommendations in the\ntop-3). Note the difference in the AP@3 for the three systems.\n\nTask 9. Create a document vector for the movie description m1 =\xe2\x80\x9cA comedy with zombies.\xe2\x80\x9d Start by\nfilling in the tf values below. Then compute idf = log10\n\nN\ndf\n\n(assume N = 10,000,000) and tf.idf =tf\xc3\x97idf (i.e.,\nno log weighting for tf). Finally, compute the normalized vector ~q as before.\n\nm1\n\ntoken tf df idf tf.idf qi\n\naction 50,000\n\ncomedy 10,000\n\nzombies 100,000\n\nromantic 10,000\n\n\n'