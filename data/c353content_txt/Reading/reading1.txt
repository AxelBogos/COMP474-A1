b'Microsoft PowerPoint - Tut1.pptxCOMP 353 - DatabasesThis slides are prepared by:\xef\xbf\xbdNicole Parmentier\xef\xbf\xbdnicole.parmentier@mail.concordia.caToday\xef\xbf\xbdFundamental theory concepts\xef\xbf\xbdPractice setting up relations\xef\xbf\xbdPractice reading/writing SQL queriesWhat is a database?\xef\xbf\xbdCollection of data stored long-term, organized in a way that is meaningful and logical\xef\xbf\xbde.g. contact list, employee files, etc.What is a database?\xef\xbf\xbdDB: Database\xef\xbf\xbdDBS: Database System\xef\xbf\xbdDMBS: Database Management SystemDBS = DB + DBMSsystem = data + managementDMBS\xef\xbf\xbdOffers convenient and secure access\xef\xbf\xbdTransaction Management:\xef\xbf\xbdAtomicity (all or nothing)\xef\xbf\xbdConsistency (follows rules)\xef\xbf\xbdIsolation (transactions do not affect each other)\xef\xbf\xbdDurability (data survives failures)DMBS\xef\xbf\xbdBetter than a simple file directory: Minimize data redundancy to avoid inconsistencyRelational Data Model\xef\xbf\xbdA data model describes data and the relationships among that data\xef\xbf\xbdRelational model organizes data (attributes) into named tables (relations)\xef\xbf\xbd e.g. Hero = (name, gameTitle, class, level, hitPoints)Game = (title, platform, releaseYear, genre)Define a relation\xef\xbf\xbdBook = (title, publisher, releaseDate,subject, price, pageCount, inPublicDomain)\xef\xbf\xbdRelationName = (string, string, date, string, float, integer, boolean)\xef\xbf\xbdMany different relations can be defined according to the application requirements\xef\xbf\xbdDefine a relation for a book:Levels of Data\xef\xbf\xbdView (external): how data is seen by users\xef\xbf\xbdConceptual (logical) Schema: defined relations, an outcome of database design \xef\xbf\xbdPhysical (internal) Schema: storage and index structures associated with relationsNote: The levels are independent of the ones below themStructured Query Language (SQL)\xef\xbf\xbdData Definition Language (DDL)\xef\xbf\xbdSyntax for declaring tables, indexes, views, constraints, etc.\xef\xbf\xbdData Manipulation Language (DML)\xef\xbf\xbdQueries \xef\xbf\xbdTransactions (data modification)\xef\xbf\xbdSchema creation/modification SQL Queries\xef\xbf\xbdAn SQL query follows the form:SELECT . . . -select which attributes are outputFROM . . . -which relations to draw data fromWHERE . . . ; -where that data meets these conditions (boolean)SQL Queries\xef\xbf\xbdRelation schema:Game = (title, platform, releaseYear, genre)\xef\xbf\xbdQuery: Find the titles of all games for the platform \xe2\x80\x98N64\xe2\x80\x99 which are stored in the database\xef\xbf\xbdQuery in SQL:SELECT titleFROM GameWHERE platform = \xe2\x80\x98N64\xe2\x80\x99;SQL Queries\xef\xbf\xbdWHERE clause is a boolean, can be as complex as you saw in COMP 232:\xef\xbf\xbdBook = (title, publisher, releaseDate,subject, price, pageCount, inPublicDomain)SELECT *FROM BookWHERE (price < 19.99 AND (pageCount < 42 OR pageCount >= 420)) OR title = \xe2\x80\x98Brave New World\xe2\x80\x99;\xef\xbf\xbdWhat is this query?SQL Queries\xef\xbf\xbdFROM clause can use multiple tables (relations), coupled through a Cartesian productHero = (name, gameTitle, class, level, hitPoints)Game = (title, platform, releaseYear, genre)SELECT Hero.name, Game.title , Game.genreFROM Game, HeroWHERE Hero.gameTitle = Game.titleAND Game.releaseYear > 1980;SQL Queries\xef\xbf\xbdRelation schemas:Hero = (name, gameTitle, class, level, hitPoints)Game = (title, platform, releaseYear, genre)\xef\xbf\xbd Instances of the relations:name gameTitle class level hitPointsMario Super Mario 64 Plumber 0 1Link Legend of Zelda Warrior 1 3title platform releaseYear genreSuper Mario 64 N64 1996 PlatformerPikmin Gamecube 2001 Puzzle-strategyCartesian Productname gameTitle class level hitPointsMario Super Mario 64 Plumber 0 1Link Legend of Zelda Warrior 1 3title platform releaseYear genreSuper Mario 64 N64 1996 PlatformerPikmin Gamecube 2001 PuzzleHero x Gamename gameTitle class level hitPoints title platform releaseYeargenreMario Super Mario 64 Plumber 0 1 Super Mario 64 N64 1996 PlatformerMario Super Mario 64 Plumber 0 1 Pikmin Gamecube 2001 PuzzleLink Legend of Zelda Warrior 1 3 Super Mario 64 N64 1996 PlatformerLink Legend of Zelda Warrior 1 3 Pikmin Gamecube 2001 PuzzleSELECT Hero.name, Game.title , Game.genreFROM Game, HeroWHERE Hero.gameTitle = Game.titleAND Game.releaseYear > 1980;name gameTitle class level hitPoints title platform releaseYeargenreMario Super Mario 64 Plumber 0 1 Super Mario 64 N64 1996 PlatformerMario Super Mario 64 Plumber 0 1 Pikmin Gamecube 2001 PuzzleLink Legend of Zelda Warrior 1 3 Super Mario 64 N64 1996 PlatformerLink Legend of Zelda Warrior 1 3 Pikmin Gamecube 2001 Puzzlename title genreMario Super Mario 64 Platformer\xef\xbf\xbdQuery Result:Aggregation in SQL\xef\xbf\xbdOperations done in the SELECT clause to summarize the data\xef\xbf\xbdSUM, AVG, MIN, MAX, COUNT\xef\xbf\xbdWill often want to use GROUP BY and HAVING to filter our dataSELECT publisher, SUM(price), COUNT(title)FROM BookGROUP BY publisherHAVING MIN(price) > 1.00;Aggregation in SQL\xef\xbf\xbdHAVING applies a condition on the groups themselves (after grouping), as opposed to a condition in the WHERE clause which applies to the individual entries/tuples/rowsSELECT publisher, SUM(price), COUNT(title)FROM BookWHERE price > 1.00GROUP BY publisher;Queries in SQL\xef\xbf\xbdTime to test your knowledge on a problemwhich uses everything we\xe2\x80\x99ve covered today(and more!)SELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;name gameTitle class level hitPointsMario Super Mario 64 Plumber 4 1Link Legend of Zelda: Wind WakerWarrior 1 3Olimar Pikmin 2 Thief 2 100Kirby Kirby 64: The Crystal Shards Shapeshifter 5 50Leon Resident Evil 4 Gunner 3 200Luigi Luigi\xe2\x80\x99s Mansion Ghostbuster 0 5Louie Pikmin 2 Assistant 0 100title platform releaseYear genreSuper Mario 64 N64 1996 PlatformerPikmin 2 Gamecube 2004 PuzzleLegend of Zelda: Wind Waker Gamecube 2003 AdventureKirby 64: The Crystal Shards N64 2000 PlatformerLuigi\xe2\x80\x99s Mansion Gamecube 2001 AdventureResident Evil 4 Gamecube 2005 AdventureSELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;name gameTitle class level hitPoints platform releaseYeargenreMario Super Mario 64 Plumber 4 1 N64 1996 PlatformerLink Legend of Zelda: Wind Waker Warrior 1 3 Gamecube 2003 AdventureOlimar Pikmin 2 Thief 2 100 Gamecube 2004 PuzzleLouie Pikmin 2 Assistant 0 100 Gamecube 2004 PuzzleKirby Kirby 64: The Crystal Shards Shapeshifter 5 50 N64 2000 PlatformerLeon Resident Evil 4 Gunner 3 200 Gamecube 2005 AdventureLuigi Luigi\xe2\x80\x99s Mansion Ghostbuster 0 5 Gamecube 2001 Adventure*Note: here we do the Cartesian product and apply the title filter from the WHERE clause immediately in order to keep the table manageable. Observe that Olimar and Louie both matched with the Game entry for Pikmin 2SELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;name gameTitle class level hitPoints platform releaseYeargenreMario Super Mario 64 Plumber 4 1 N64 1996 PlatformerLink Legend of Zelda: Wind Waker Warrior 1 3 Gamecube 2003 AdventureOlimar Pikmin 2 Thief 2 100 Gamecube 2004 PuzzleLouie Pikmin 2 Assistant 0 100 Gamecube 2004 PuzzleKirby Kirby 64: The Crystal Shards Shapeshifter 5 50 N64 2000 PlatformerLeon Resident Evil 4 Gunner 3 200 Gamecube 2005 AdventureLuigi Luigi\xe2\x80\x99s Mansion Ghostbuster 0 5 Gamecube 2001 AdventureSELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;name gameTitle class level hitPoints platform releaseYeargenreMario Super Mario 64 Plumber 4 1 N64 1996 PlatformerKirby Kirby 64: The Crystal Shards Shapeshifter 5 50 N64 2000 PlatformerOlimar Pikmin 2 Thief 2 100 Gamecube 2004 PuzzleLeon Resident Evil 4 Gunner 3 200 Gamecube 2005 AdventureLink Legend of Zelda: Wind Waker Warrior 1 3 Gamecube 2003 Adventure*Note: here I have reordered the entries by genre as the beginning of the GROUP BY action, but it is only finished once the entries are collapsed into single rows by genre and once the desired attributes are aggregated. I have extended this process into several steps here so it is easier to see what\xe2\x80\x99s happening with the data in the table and the various filters being appliedSELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;name gameTitle class level hitPoints platform releaseYeargenreMario Super Mario 64 Plumber 4 1 N64 1996 PlatformerKirby Kirby 64: The Crystal Shards Shapeshifter 5 50 N64 2000 PlatformerOlimar Pikmin 2 Thief 2 100 Gamecube 2004 PuzzleLeon Resident Evil 4 Gunner 3 200 Gamecube 2005 AdventureLink Legend of Zelda: Wind Waker Warrior 1 3 Gamecube 2003 Adventure*Note: Mario and Kirby are grouped together in the Platformer genre, and this group\xe2\x80\x99s minimum release year is Mario\xe2\x80\x99s 1996. Because this group does not meet the HAVING condition, the whole group (including Kirby) is filtered outSELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;genre COUNT(Hero.name)Adventure 2Puzzle 1SELECT Game.genre,COUNT(Hero.name)FROM Game, HeroWHERE Hero.level >= 1AND Hero.gameTitle = Game.titleGROUP BY Game.genreHAVING MIN(Game.releaseYear) > 1999ORDER BY Game.genre DESC;genre COUNT(Hero.name)Puzzle 1Adventure 2*Note: ORDER BY - DESC sorts the values in decreasing/descending order. For a string, this means the opposite of alphabetical order, like in java. We also have ASC for ascending order, which is the default of ORDER BY. These slides were made referencing the course slides from Prof Shiri, as well as the textbook: A First Course in Database Systems by Ullman and Widom, third edition'