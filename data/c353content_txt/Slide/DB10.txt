b'Microsoft PowerPoint - DB10.ppt [Compatibility Mode]1COMP353 DatabasesMore on SQL: Null value Triggers1Domains\xef\xbf\xbd SQL allows user defined data types - domains\xef\xbf\xbd We can define a domain as follows:\xef\xbf\xbd The keyword CREATE DOMAIN\xef\xbf\xbd The name of the domain\xef\xbf\xbd The keyword AS\xef\xbf\xbd Type description\xef\xbf\xbd Optional default value, constraints\xef\xbf\xbd ExampleCREATE DOMAIN <name> AS <type description>2Domains\xef\xbf\xbd To create a domain:\xef\xbf\xbd CREATE DOMAIN MovieDomain AS VARCHAR(50);\xef\xbf\xbd Example:CREATE TABLE Movie (title MovieDomain, year DATE, \xe2\x80\xa6\xe2\x80\xa6.\xe2\x80\xa6\xe2\x80\xa6.);3Domains\xef\xbf\xbd To create a domain with default value:\xef\xbf\xbd CREATE DOMAIN MovieDomain AS VARCHAR(50) DEFAULT \xe2\x80\x99unknown\xe2\x80\x99;\xef\xbf\xbd To change the default for a domain:\xef\xbf\xbd ALTER DOMAIN MovieDomain SET DEFAULT \xe2\x80\x99no such title\xe2\x80\x99;\xef\xbf\xbd To delete a domain definition:\xef\xbf\xbd DROP DOMAIN MovieDomain;4NULLs\xef\xbf\xbd We use NULL in place of a value in a tuple\'s component  when:\xef\xbf\xbd The value is unknown -- don\xe2\x80\x99t know\xef\xbf\xbd The value is inapplicable -- NA\xef\xbf\xbd The exact value does not matter -- don\xe2\x80\x99t care\xef\xbf\xbd There could be many reasons why a value is not present in a relation, e.g., when inserting a tupleinto a relation,  we don\xe2\x80\x99t have/wish to specify allthe values for the attributes.5Arithmetic operations on NULLs\xef\xbf\xbd Result of an arithmetic operator, when at least one of the operands has a value of NULL, is NULL\xef\xbf\xbd Example:\xef\xbf\xbd Suppose the value of attribute x is NULL \xef\xbf\xbdThe value x+3 is also NULL \xef\xbf\xbd Note however that NULL is not a constant!\xef\xbf\xbd NULL + 3 is illegal62Arithmetic operations on NULLs\xef\xbf\xbd Some key laws in math fail to hold with NULLs\xef\xbf\xbd Suppose x is an attribute with numeric value\xef\xbf\xbd Example 1:\xe2\x80\xa2 We know that x * 0 = 0, but\xe2\x80\xa2 If x is NULL \xef\xbf\xbd x * 0 is NULL\xef\xbf\xbd Example 2:\xe2\x80\xa2 We also know that x \xe2\x80\x93 x = 0, but\xe2\x80\xa2 If x is NULL \xef\xbf\xbd x \xe2\x80\x93 x is NULL7Comparison operations on NULLs\xef\xbf\xbd The result of a comparison is \xe2\x80\x9cusually\xe2\x80\x9d TRUE or FALSE\xef\xbf\xbd That is, 2 possible values or 2-valued logic\xef\xbf\xbd Comparisons involving NULLs  give rise to a 3rd truth value, UNKNOWN, and hence we are dealing with a 3-valued logic \xef\xbf\xbd In this case, the 3 possible values are true, false, unknown83-Valued Logic\xef\xbf\xbd We may assume that:\xef\xbf\xbd TRUE = 1 \xef\xbf\xbd FALSE = 0\xef\xbf\xbd UNKNOWN = 1/2\xef\xbf\xbd Then: \xef\xbf\xbd x AND y = min ( x, y )\xef\xbf\xbd x OR y = max ( x, y )\xef\xbf\xbd NOT x = 1\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92x9Truth table for 3-Valued LogicX Y X AND Y X OR Y NOT XTRUE TRUE TRUE TRUE FALSETRUE UNKNOWN UNKNOWN TRUE FALSETRUE FALSE FALSE TRUE FALSEUNKNOWN TRUE UNKNOWN TRUE UNKNOWNUNKNOWN UNKNOWN UNKNOWN UNKNOWN UNKNOWNUNKNOWN FALSE FALSE UNKNOWN UNKNOWNFALSE TRUE FALSE TRUE TRUEFALSE UNKNOWN FALSE UNKNOWN TRUEFALSE FALSE FALSE FALSE TRUE103-Valued Logic\xef\xbf\xbd Some key laws in logic fail to hold with NULLs\xef\xbf\xbd Example:\xef\xbf\xbd Law of the excluded middle\xe2\x80\xa2 x OR NOT x = TRUE\xef\xbf\xbd For 3-valued logic\xe2\x80\xa2 if x = UNKNOWN\xef\xbf\xbd x OR (NOT x) = max(1/2,(1\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x921/2)) = 1/2 = UNKNOWN \xe2\x89\xa0\xe2\x89\xa0\xe2\x89\xa0\xe2\x89\xa0 (TRUE)\xe2\x80\xa2 Note: Do not treat NULL as a \xe2\x80\x9cvalue\xe2\x80\x9d(e.g., see the next example)11Example\xef\xbf\xbd Relation schema:Movie ( title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd Consider query:SELECT *FROM Movie WHERE length <= 120 OR length > 120;\xef\xbf\xbd Don\xe2\x80\x99t we expect to get a copy of the Movie relation?\xef\xbf\xbd Yes, if there is no Movie tuple whose length is NULL\xef\xbf\xbd This query returns a subset of Movie tuples in general. It returns only each Movie tuple whose length is not NULL.123Example\xef\xbf\xbd Read the box on page 254 in the textbook for some rules on NULLs\xef\xbf\xbd The value NULL is ignored in any aggregation.\xef\xbf\xbd Query: SELECT COUNT(A) FROM R;returns the number of non-null values under attribute A in R.\xef\xbf\xbd Query:SELECT COUNT(*) FROM R;returns the number of tuples in R.\xef\xbf\xbd NULL is treated as an ordinary value in a \xe2\x80\x9cgroup by\xe2\x80\x9d  attribute.\xef\xbf\xbd Query:SELECT A, AVG(B) FROM R GROUP BY A;produces a tuple for each distinct value A, including the null, if exists.13Joins in SQL\xef\xbf\xbd How to express the Cartesian product in SQL?  \xef\xbf\xbd List the relation names in the FROM clause\xef\xbf\xbd How do we express various joins in SQL?\xef\xbf\xbd Follow the Cartesian Product with conditions in the WHERE clause for the desired join14Joins in SQL2\xef\xbf\xbd In SQL2, there are other forms for expressing \xc3\x97\xc3\x97\xc3\x97\xc3\x97 and  \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xef\xbf\xbd Cartesian Product of Movie and StarsIn\xef\xbf\xbd Movie CROSS JOIN StarsIn; (Movie \xc3\x97\xc3\x97\xc3\x97\xc3\x97 StarsIn,  in RA)\xef\xbf\xbd Theta- (or equi-) join of Movie and StarsIn\xef\xbf\xbd Movie JOIN StarsIn ONStarsIn.title = Movie.title AND StarsIn.year = Movie.year;Note: The result may have some redundant columns; We can use the above expression as a subquery in a FROMclause and use SELECT to remove these undesired attributes \xef\xbf\xbd Natural join of Movie and StarsIn\xef\xbf\xbd Movie NATURAL JOIN StarsIn; 15Example\xef\xbf\xbd Relation schemas:Exec(name, address, cert#, netWorth)Star (name, address, gender, birthdate)\xef\xbf\xbd Query:Find all info on all stars who are also movie executives\xef\xbf\xbd Query in SQL:SELECT *FROM Star NATURAL JOIN Exec;\xef\xbf\xbd The join expression appears in a FROM clause\xef\xbf\xbd Parenthesized SELECT-FROM-WHERE is also allowed in a FROM clause 16Example\xef\xbf\xbd Relation schemas:Exec(name, address, cert#, netWorth)Star (name, address, gender, birthdate)\xef\xbf\xbd Query: Find \xe2\x80\x9call\xe2\x80\x9d information on all stars\xef\xbf\xbd Query in SQL:SELECT *FROM Star;\xef\xbf\xbd This query does not return all information on stars who are also movie executives \xef\xbf\xbd Query in SQLSELECT *FROM Star NATURAL JOIN Exec ;\xef\xbf\xbd This query does NOT return stars who are not movie executives 17Outer joins\xef\xbf\xbd R OUTER JOIN S -- computes the join of R and Swith dangling tuples padded with NULLs\xef\xbf\xbd A tuple in R is dangling if it doesn\'t join with any tuple in S\xef\xbf\xbd Outer join could be\xef\xbf\xbd FULL OUTER JOIN\xe2\x80\xa2 It pads, with nulls, the dangling tuples of R and S\xef\xbf\xbd LEFT OUTER JOIN\xe2\x80\xa2 It pads dangling tuples of R only\xef\xbf\xbd RIGHT OUTER JOIN\xe2\x80\xa2 It pads dangling tuples of S only184ExampleInstance S:Instance R:SELECT * FROM R NATURAL FULL OUTER JOIN S:B C2 52 67 8A B1 22 3A B C1 2 51 2 62 3 NULLNULL 7 819ExampleInstance S:Instance R:B C2 52 67 8A B1 22 3A B C1 2 51 2 62 3 NULLR NATURAL LEFT OUTER JOIN S:20ExampleInstance S:Instance R:B C2 52 67 8A B1 22 3A B C1 2 51 2 6NULL 7 8R NATURAL RIGHT OUTER JOIN S:21Outer joins in SQL2R [NATURAL] [LEFT | RIGHT | FULL] OUTER JOIN S [ON ...]\xef\xbf\xbd Can do either a natural join \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2 or a theta-join \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2c\xef\xbf\xbd Use  NATURAL for \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2, and use ON for theta-outer join, but not both (NATURAL and ON cannot be used together)\xef\xbf\xbd Can use any one of  LEFT, RIGHT, or FULL\xef\xbf\xbd Examples:\xef\xbf\xbd R NATURAL FULL OUTER JOIN S;\xef\xbf\xbd Star NATURAL LEFT OUTER JOIN Exec; (for slide #17)\xef\xbf\xbd Movie RIGHT OUTER JOIN StarsIn ONStarsIn.title = Movie.title AND StarsIn.year = Movie.year;22Constraints and Triggers (Chapter 7)\xef\xbf\xbd SQL provides a variety of ways for expressing integrityconstraints as part of the database schema\xef\xbf\xbd Constraints\xe2\x80\x99 checking, in essence, provide users with more control over the database content\xef\xbf\xbd An active element is a statement that we write once, store it in the database, and \xe2\x80\x9cexpect\xe2\x80\x9d it to be executed at \xe2\x80\x9cappropriate\xe2\x80\x9d times\xef\xbf\xbd The time of action might be when certain events occur (e.g., insertion of a tuple into a relation or any change(s) made to the database so that certain condition(s) becomes true23Constraints\xef\xbf\xbd Declaration of primary keys\xef\xbf\xbd Foreign key constraints (also see referential integrity constraints)\xef\xbf\xbd E.g., if in relation StarsIn, it says that a star has a role in a movie m, then there should be a movie tuple m in Movie\xef\xbf\xbd Constraints on attributes, tuples, and relations\xef\xbf\xbd SQL2 Assertions = global/general constraints (inter-relations)\xef\xbf\xbd Not supported in Oracle\xef\xbf\xbd Triggers\xef\xbf\xbd are substitutes for \xe2\x80\x9cgeneral\xe2\x80\x9d assertions\xef\xbf\xbd SQL3 triggers and assertions245Primary Key\xef\xbf\xbd A key constraint is declared by the DDL command CREATE TABLE\xef\xbf\xbd Can use the keywords PRIMARY KEY or UNIQUE\xef\xbf\xbd Oracle treats them as synonyms \xef\xbf\xbd A table can only have one primary key but any number of  "unique\xe2\x80\x9d declarations\xef\xbf\xbd Two ways to declare a primary key in the CREATE TABLE statement: \xef\xbf\xbd After an attribute type, if the attribute is a key by itself\xef\xbf\xbd As a separate line, for any number of attributes forming the key: PRIMARY KEY ( list of attribute(s) ) \xe2\x80\xa2 Should use the second way if the key is not a singleton25Primary Key\xef\xbf\xbd Example:CREATE TABLE Star(name CHAR(30) PRIMARY KEY, address VARCHAR(255), gender CHAR(1),birthdate DATE);Three consequences of declaring a primary key:1. Repeated values of the key attributes will not be allowed  Any violation will be rejected/failed by the DBMS2. NULLs are not allowed for the key attribute(s)3. (Another possible consequence) Creating an index on the primary key, or alternatively keeping the table sorted on the key attribute(s).26Primary Key\xef\xbf\xbd Example:CREATE TABLE Star (name CHAR(30) UNIQUE, address VARCHAR(255) UNIQUE, gender CHAR(1),birthdate DATE);This is to say: no two movie stars have the same address27Primary Key\xef\xbf\xbd Example:CREATE TABLE Star(name CHAR(30), address VARCHAR(255), gender CHAR(1),birthdate DATE, UNIQUE (name));Note the distinction between UNIQUE and PRIMARY KEY:When using UNIQUE, NULLs are allowed for (all or someof)  the key attribute(s).28Primary Key\xef\xbf\xbd Example:CREATE TABLE Movie (title CHAR(20), year INT, length INT, PRIMARY KEY(title, year));Here, the key declaration must appear on a separate line,since the key consists of more than 1 attribute (title, year)29Foreign Keys\xef\xbf\xbd Referential integrity constraints: Intuitively, values for certain attributes must \xe2\x80\x9cmake sense\xe2\x80\x9d \xef\xbf\xbd That is, every non-Null value in attribute A of relation R must appear in attribute B of relation S -- Inclusion dependency\xef\xbf\xbd In SQL, we declare an attribute (or a set K of attributes) in a relation (R) to be a foreign key, if they reference/point to some attribute(s) G of some related relation S. That is, t[K] = s[G] if tuple t in R refers to tuple s in S\xef\xbf\xbd The set of attributes G must be declared as the primary key of S\xef\xbf\xbd The notion of referential integrity constraint is the one that connects or relates tuples in different relations. 306Foreign Keys\xef\xbf\xbd Two ways to declare foreign keys:\xef\xbf\xbd If the foreign key is a single attribute A, we may write the following after the attribute name and its type:(1) REFERENCES < referenced-table > (A)\xef\xbf\xbd When the foreign key includes more than one attribute, write it as a separate line in the CREATE TABLE declaration:(2)      FOREIGN KEY (<attributes>) REFERENCES <table> (<attributes>)\xe2\x80\xa2 Use form (2) if the foreign key includes 2 or more attributes31Foreign Keys\xef\xbf\xbd Relation Schemas:Exec(eName, address, cert#, netWorth)Studio (sName,   address,\xe2\x86\x96\xe2\x86\x96\xe2\x86\x96\xe2\x86\x96 presidentC#)Here, Studio(presidentC#) refers to Exec(cert#).CREATE TABLE Studio(sName CHAR(30) PRIMARY KEY, address VARCHAR(255), presidentC#  INT REFERENCES Exec(cert#));32Foreign Keys\xef\xbf\xbd Relation Schemas:Exec(eName, address, cert#, netWorth)Studio (sName, address,presidentC#)CREATE TABLE Studio(sName CHAR(30) PRIMARY KEY, address VARCHAR(255), presidentC#  INT,FOREIGN KEY presidentC#  REFERENCES  Exec(cert#) );In either declaration form, when a value v appears for presidentC# in a Studio tuple, v MUST already exist for an Exec tuple.Note: An exception to this requirement is when v is NULL. 33Maintaining Referential IntegrityExec(eName, address, cert#, netWorth)Studio (sName, address,presidentC#)\xef\xbf\xbd How to maintain referential integrity when the database is modified?\xef\xbf\xbd Possible situations violating foreign key constraints:\xef\xbf\xbd Insert:\xe2\x80\xa2 1. Insert a new Studio tuple with presidentC# that is not cert#  of any Exec tuple\xef\xbf\xbd Update:\xe2\x80\xa2 2. Update a Studio tuple to change its presidentC#  to a non-Null value thatis not the cert# of any tuple in table Exec\xe2\x80\xa2 3. Update an Exec tuple e that changes e.cert#, when the old cert# waspresidentC# of some Studio tuple s (i.e.,  e.cert#  is referenced by s)\xef\xbf\xbd Delete: \xe2\x80\xa2 4. Delete an Exec tuple when its cert# is presidentC# of 1 or more Studio tuplesRecall that cert# is the key of the Exec table34Maintaining Referential Integrity\xef\xbf\xbd There are three policies, when there is a transaction that violates a referential integrity:\xef\xbf\xbd The reject policy (default)The system will reject any transaction violating referential integrity constraints -- a run-time error will be generated and the database state will not change.\xef\xbf\xbd If we update (3) or delete (4) a referenced item:\xe2\x80\xa2 The cascade policy: changes to the referenced attributes are \xe2\x80\x9cmimicked\xe2\x80\x9d at the foreign key (e.g. presidentC#)\xe2\x80\xa2 The \xe2\x80\x9cset null\xe2\x80\x9d policy: set  the referencing attribute to NULL (e.g., presidentC# in Studio) 35Maintaining Referential IntegrityExec(eName, address, cert#, netWorth)Studio (sName, address,presidentC#)Example: For the (default) reject policy, the system will reject the following modifications/transactions:\xe2\x80\xa2 Insert a new Studio tuple with presidentC# that is not in any Exec tuple\xe2\x80\xa2 Update a Studio tuple to change the presidentC#  to a non-null value that is not in any Exec tuple\xe2\x80\xa2 Update an Exec tuple to change cert#, when the old cert# value is presidentC# in some Studio tuple(s)\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some Studio tuple(s)367Maintaining Referential IntegrityExec(eName, address, cert#, netWorth)Studio (sName, address,presidentC#)\xef\xbf\xbd The cascade policy:\xef\xbf\xbd In case of deleting (updating) a tuple in a referenced relation (Exec), the DBMS will delete (update) the referencing tuple(s) in Studio\xef\xbf\xbd Example:\xef\xbf\xbd The system will cascade the following modifications:\xe2\x80\xa2 Update Exec tuple to change cert#, when its cert# is presidentC# in some Studio tuple\xe2\x80\xa2 The system will update presidentC# in corresponding Studio tuple(s)\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some Studio tuple\xe2\x80\xa2 The system will delete corresponding tuple(s) in Studio37Maintaining Referential Integrity\xef\xbf\xbd The set-null policy:\xef\xbf\xbd In case of deleting or updating a tuple in a referenced relation (Exec), the DBMS will set to NULL the corresponding values in the referencing tuples (in Studio) \xef\xbf\xbd Example:\xef\xbf\xbd The system will do the following modifications:\xe2\x80\xa2 Update Exec tuple to change cert#, when its cert# is presidentC# in some Studio tuple\xe2\x80\xa2 The DBMS will set to NULL presidentC# in corresponding Studio tuple(s)\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some Studio tuple(s)\xe2\x80\xa2 The DBMS will set to NULL presidentC# in the corresponding Studio tuple(s)38Selecting a Policy\xef\xbf\xbd Reaction options/policies may be chosen (by ?) for deletes and updates, in an independent way \xef\xbf\xbd ON [DELETE | UPDATE] [CASCADE | SET NULL]39Selecting a Policy\xef\xbf\xbd Example:CREATE TABLE Studio(name CHAR(30) PRIMARY KEY, address VARCHAR(255), presidentC#  INT,FOREIGN KEY presidentC# REFERENCES Exec(cert#)ON DELETE SET NULL   (or SET DEFAULT)ON UPDATE CASCADE);40Selecting a Policy\xef\xbf\xbd "Correct\xe2\x80\x9c or \xe2\x80\x9cright\xe2\x80\x9d policy is a design decision\xef\xbf\xbd Example:\xef\xbf\xbd If a studio president retires (and its tuple gets deleted), the studio should exist with a NULL value for the president and not be deleted along with the president\xef\xbf\xbd If the certificate number cert# of a studio president was changed (by an update), it should be updated in all corresponding places (presidentC# in Studio, in our case);we should not lose the information on who is the current president of a given studio41Not-Null Constraints\xef\xbf\xbd We can assert that the value of an attribute may not be NULL \xef\xbf\xbd Example:presidentC# INT REFERENCES Exec(cert#) NOT NULLTwo consequences:1. We can\xe2\x80\x99t insert a tuple into Studio by just specifying name andaddress; the value presidentC# must also be present.2. We can\xe2\x80\x99t use the \xe2\x80\x9cset-null\xe2\x80\x9d policy to fix foreign key violations bychanging presidentC# to be NULL428Attribute-Based Checks\xef\xbf\xbd Aside from \xe2\x80\x9creferencing\xe2\x80\x9d, more complex constraints can be attached to an attribute declaration, followed by CHECK (condition-on-attribute)\xef\xbf\xbd That is, we want the condition to hold for that attribute in every tuple in the relation\xef\xbf\xbd Condition may involve the checked attribute\xef\xbf\xbd Other attributes and relations may be involved, but only insubqueries (see slide #46)\xe2\x80\xa2 Oracle : No subqueries allowed in the condition43Attribute-Based Checks\xef\xbf\xbd Example:CREATE TABLE Studio(name CHAR(30) PRIMARY KEY, address VARCHAR(255), presidentC#  INT CHECK (presidentC# >= 100000));This requires certificate numbers to be at least 6 digits.44Attribute-Based ChecksWhen an attribute-based check/condition is (not) done?\xef\xbf\xbd The condition is checked \xe2\x80\xa2 When the associated attribute changes, i.e., an insert or update occurs\xef\xbf\xbd The condition is NOT checked \xe2\x80\xa2 When the relations involved in the subquery of the condition are changed; see the next slide45Attribute-Based Checks\xef\xbf\xbd Example:CREATE TABLE Studio(name CHAR(30) PRIMARY KEY, address VARCHAR(255), presidentC#  INT CHECK (presidentC# IN (SELECT cert# FROM Exec)));\xef\xbf\xbd Is this check the same as a foreign-key constraint?\xe2\x80\xa2 Not really! The above check is done only when we insert a tuple in Studio or change the presidentC# in an existing tuple in Studio, not when deleting or update a tuple in Exec46Attribute-Based Checks\xef\xbf\xbd Example:CREATE TABLE Star(name CHAR(30) PRIMARY KEY, address VARCHAR(255),birthdate DATE, gender CHAR(1) CHECK (gender IN (\xe2\x80\x99F\xe2\x80\x99, \xe2\x80\x99M\xe2\x80\x99)));The above condition uses an explicit set/relation with two tuples,providing possible values for attribute gender47Tuple-Based Checks\xef\xbf\xbd We restrict some components of the tuples of a relation by a tuple-based check\xef\xbf\xbd Tuple-based check must appear on a separate element/part in a table declaration command\xef\xbf\xbd Format:CHECK (condition)\xef\xbf\xbd Condition may involve any attribute(s) of the table\xef\xbf\xbd Other attributes and tables may be involved, but only in subqueries\xe2\x80\xa2 Oracle: Does not support subqueries in condition489Tuple-Based Checks\xef\xbf\xbd Example:CREATE TABLE Star(name CHAR(30) PRIMARY KEY, address VARCHAR(255), gender CHAR(1),birthdate DATE, CHECK (gender = \xe2\x80\x99F\xe2\x80\x99 OR name NOT LIKE \xe2\x80\x99Ms.%\xe2\x80\x99));This constraint says that if a \xe2\x80\x9cstar is male\xe2\x80\x9d (M), then \xe2\x80\x9chis name must not begin with Ms.\xe2\x80\x9d (~L), i,e, M\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92~L, or ~M \xe2\x88\xa8\xe2\x88\xa8\xe2\x88\xa8\xe2\x88\xa8 ~L49Modifications of Constraints\xef\xbf\xbd We can add, modify, or delete constraints at any time\xef\xbf\xbd Give names to constraints so we can \xe2\x80\x9crefer\xe2\x80\x9d to them laterExamples of defining constraints:name CHAR(30) CONSTRAINTName-Is-Key PRIMARY KEY,ORCONSTRAINT RightTitle CHECK (gender = \xe2\x80\x99F\xe2\x80\x99 OR name NOT LIKE \xe2\x80\x99Ms.%\xe2\x80\x99)Examples of modifying (deleting/adding) constraints:ALTER TABLE Star DROP CONSTRAINT Name-Is-Key;ORALTER TABLE Star ADD CONSTRAINT NameIsKey PRIMARY KEY (name);50Assertions\xef\xbf\xbd Assertions, also called \xe2\x80\x9cgeneral constraints\xe2\x80\x9d, are  boolean-valued SQL expressions that must always be satisfied\xef\xbf\xbd Sometimes we need a constraint that involves a relation as a whole or part of the database schema(This is not supported in Oracle)\xef\xbf\xbd Assertions are checked when a specified relation changes\xef\xbf\xbd Syntax:CREATE ASSERTION < assertion-name > CHECK (< condition >);Note: Unlike attribute/tuple based checks, assertions are defined outside table declarations. 51Assertions\xef\xbf\xbd Relation schemas:Exec (name, address, cert#, netWorth) Studio (name, address, presidentC#)\xef\xbf\xbd Assertion in SQL:CREATE ASSERTION RichPresident CHECK(NOT EXIST (SELECT *FROM Studio, ExecWHERE Studio.presidentC# = Exec.cert# ANDExec.netWorth < 10000000));\xef\xbf\xbd This constraint is checked when Studio and/or Exec tables change52Triggers\xef\xbf\xbd Also called event-condition-action (ECA) rules\xef\xbf\xbd Event\xef\xbf\xbd DB transactions (Insertion, Deletion, Update)\xef\xbf\xbd Condition\xef\xbf\xbd A condition to check if a trigger applies\xef\xbf\xbd Action\xef\xbf\xbd One or more SQL statements to be executed if a triggering event occurred and the condition(s) holds.53Triggers\xef\xbf\xbd Triggers are not supported in SQL2\xef\xbf\xbd Oracle\xe2\x80\x99s version and SQL3 version differfrom Checks or SQL2 assertions in that:\xef\xbf\xbd For triggers, event is \xe2\x80\x9cprogrammable\xe2\x80\x9d, rather than impliedby the kind of check\xef\xbf\xbd For checks, we don\xe2\x80\x99t have conditions specified\xef\xbf\xbd (Re)action could be any sequence of database operations\xef\xbf\xbdActive Database Management Systems (ADBMS)5410TriggersRelation Schema: Exec(name, address, cert#, networth)Example of an SQL trigger:CREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON Exec                    \xef\x83\xa7 EventREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTupleFOR EACH ROWWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)    \xef\x83\xa7 [Condition]UPDATE Exec                                                         \xef\x83\xa7 ActionSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert#; 55TriggersCREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTuple FOR EACH ROWWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)UPDATE ExecSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert#;\xef\xbf\xbd AFTER could be changed to either: \xef\xbf\xbd BEFORE\xef\xbf\xbd INSTEAD OF 56TriggersCREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTuple FOR EACH ROWWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)UPDATE ExecSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert#;\xef\xbf\xbd OF in \xe2\x80\x98UPDATE OF\xe2\x80\x99 is optional \xef\xbf\xbd If present, it defines the event to be only an update of the attribute(s) listed after the keyword OF 57TriggersCREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTupleFOR EACH ROWWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)UPDATE ExecSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert#;\xef\xbf\xbd UPDATE (OF whatever) could be changed to: \xef\xbf\xbd INSERT\xef\xbf\xbd DELETE 58TriggersCREATE TRIGGER NetWorthTriggerAFTER INSERT ON ExecREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTupleFOR EACH ROWWHEN (NewTuple.netWorth < 10000000)DELETE ExecWHERE cert# = NewTuple.cert#;\xef\xbf\xbd If the event is INSERT:\xef\xbf\xbd REFERENCINGNEW ROW AS NewTuple\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7 OLD makes no sense!59TriggersCREATE TRIGGER NetWorthTriggerAFTER DELETE ON ExecREFERENCINGOLD ROW AS OT, NEW ROW AS NTFOR EACH ROWWHEN (10000000 > (SELECT AVG(netWorth) FROM Exec))INSERT INTO ExecVALUES (OT.name,OT.address,OT.cerf#,OT.netWorth);\xef\xbf\xbd If event is DELETE:\xef\xbf\xbd REFERENCINGOLD ROW AS OldTuple\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7 NEW makes no sense!6011TriggersCREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD ROW AS OldTuple, NEW ROW AS NewTupleFOR EACH ROWWHEN (OldTuple.netWorth > NewTuple.netWorth)UPDATE ExecSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert# ;\xef\xbf\xbd The action could be any sequence of SQL statements, separated by semicolons and embeded in a pair of BEGIN and END, e.g.,     WHEN condition BEGIN S1; \xe2\x80\xa6 Sk; END;61TriggersCREATE TRIGGER NetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD ROW AS OldTuple,NEW ROW AS NewTupleFOR EACH ROWWHEN (OldTuple.netWorth > NewTuple.netWorth)UPDATE ExecSET netWorth = OldTuple.netWorthWHERE cert# = NewTuple.cert#;\xef\xbf\xbd This trigger is row-level trigger\xef\xbf\xbd If we omit \xe2\x80\x9cFOR EACH ROW\xe2\x80\x9d, the trigger becomes a statement-level trigger, which is the default 62Triggers\xef\xbf\xbd If we update an \xe2\x80\x9centire\xe2\x80\x9d table with an SQL statement\xef\xbf\xbd A row-level trigger will be executed once for each tuple\xef\xbf\xbd A statement-level trigger will be executed only once for the entire update\xef\xbf\xbd In a statement-level trigger:\xef\xbf\xbd We can not refer to old and new tuples\xef\xbf\xbd Instead, we can/should refer to \xe2\x80\xa2 The collection of old tuples as OLD TABLE\xe2\x80\xa2 The collection of new tuples as NEW TABLE63Triggers\xef\xbf\xbd Ex: Constraint: \xe2\x80\x9cThe average net worth of executives may NOT drop below $500,000.\xe2\x80\x9d  This could be violated e.g., by updating netWorth, or deleting or inserting tuples from/into Exec. \xef\xbf\xbd Below is a trigger for update; similar triggers must be written for  delete and insert.CREATE TRIGGER AvgNetWorthTriggerAFTER UPDATE OF netWorth ON ExecREFERENCINGOLD TABLE  AS OldStuff,NEW TABLE AS NewStuffFOR EACH STATEMENTWHEN (500000 >>>> (SELECT  AVG(networth) FROM Exec))BEGINDELETE FROM ExecWHERE (name, address, cert#, netWorth) IN NewStuff ;INSERT INTO Exec(SELECT * FROM OldStuff) ;END; 64TriggersRelation scheme: Employee(name, empId, salary, dept, supervisorId)Constraint: No employee gets a salary more than his/her supervisor.CREATE TRIGGER Inform_supervisorBEFORE INSERT OR UPDATE OF salary, supervisorId ON EmployeeNEW ROW AS newFOR EACH ROWWHEN (new.salary > (SELECT salary FROM Employee WHERE empId=new.supervisorId))BeginROLLBACK;Inform_Supervisor(new.supervisorId, new.empId);End;65Instead-Of TriggersRelation Scheme: Movie(title, year, length, filmType, studioName, producerC#)CREATE VIEW ParamountMovie ASSELECT title, yearFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;The following trigger replaces an insertion on the view (ParamountMovie) with aninsertion on its underlying base table (Movie)CREATE TRIGGER ParamountInsertINSTEAD OF INSERT ON ParamountMovieREFERENCING NEW ROW AS NewRowFOR EACH ROWINSERT INTO Movie(title, year, studioName)VALUES (NewRow.title, NewRow.year, \xe2\x80\x99Paramount\xe2\x80\x99); 6612A test on Triggers!Suppose relation rel(a, b) has no tuples. Consider the trigger:CREATE TRIGGER TAFTER INSERT ON relREFERENCING NEW ROW AS newRowFOR EACH ROWWHEN (newRow.a * newRow.b > 10)INSERT INTO rel VALUES(newRow.a - 1, newRow.b + 1);Inserting which of  the following tuples into relation rel results in having exactly 2 tuples in rel?1. (3, 5)2. (4, 3)3. (3, 4) 4. (5, 3)67'