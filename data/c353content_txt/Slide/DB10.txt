b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMicrosoft PowerPoint - DB10.ppt [Compatibility Mode]\n\n\n1\n\nCOMP353 Databases\n\nMore on SQL: \n\nNull value \n\nTriggers\n\n1\n\nDomains\n\n\xef\xbf\xbd SQL allows user defined data types - domains\n\n\xef\xbf\xbd We can define a domain as follows:\n\n\xef\xbf\xbd The keyword CREATE DOMAIN\n\n\xef\xbf\xbd The name of the domain\n\n\xef\xbf\xbd The keyword AS\n\n\xef\xbf\xbd Type description\n\n\xef\xbf\xbd Optional default value, constraints\n\n\xef\xbf\xbd Example\n\nCREATE DOMAIN <name> AS <type description>\n2\n\nDomains\n\n\xef\xbf\xbd To create a domain:\n\xef\xbf\xbd CREATE DOMAIN MovieDomain AS VARCHAR(50);\n\n\xef\xbf\xbd Example:\nCREATE TABLE Movie (\n\ntitle MovieDomain, \n\nyear DATE, \n\n\xe2\x80\xa6\xe2\x80\xa6.\n\n\xe2\x80\xa6\xe2\x80\xa6.\n\n);\n\n3\n\nDomains\n\n\xef\xbf\xbd To create a domain with default value:\n\xef\xbf\xbd CREATE DOMAIN MovieDomain AS VARCHAR(50) \n\nDEFAULT \xe2\x80\x99unknown\xe2\x80\x99;\n\n\xef\xbf\xbd To change the default for a domain:\n\xef\xbf\xbd ALTER DOMAIN MovieDomain SET DEFAULT \xe2\x80\x99no such title\xe2\x80\x99;\n\n\xef\xbf\xbd To delete a domain definition:\n\xef\xbf\xbd DROP DOMAIN MovieDomain;\n\n4\n\nNULLs\n\n\xef\xbf\xbd We use NULL in place of a value in a tuple\'s \n\ncomponent  when:\n\n\xef\xbf\xbd The value is unknown -- don\xe2\x80\x99t know\n\n\xef\xbf\xbd The value is inapplicable -- NA\n\n\xef\xbf\xbd The exact value does not matter -- don\xe2\x80\x99t care\n\n\xef\xbf\xbd There could be many reasons why a value is not \n\npresent in a relation, e.g., when inserting a tuple\n\ninto a relation,  we don\xe2\x80\x99t have/wish to specify all\n\nthe values for the attributes.\n5\n\nArithmetic operations on NULLs\n\xef\xbf\xbd Result of an arithmetic operator, when at least one of the \n\noperands has a value of NULL, is NULL\n\n\xef\xbf\xbd Example:\n\n\xef\xbf\xbd Suppose the value of attribute x is NULL \n\n\xef\xbf\xbdThe value x+3 is also NULL \n\n\xef\xbf\xbd Note however that NULL is not a constant!\n\n\xef\xbf\xbd NULL + 3 is illegal\n\n6\n\n\n\n2\n\nArithmetic operations on NULLs\n\n\xef\xbf\xbd Some key laws in math fail to hold with NULLs\n\n\xef\xbf\xbd Suppose x is an attribute with numeric value\n\n\xef\xbf\xbd Example 1:\n\n\xe2\x80\xa2 We know that x * 0 = 0, but\n\n\xe2\x80\xa2 If x is NULL \xef\xbf\xbd x * 0 is NULL\n\n\xef\xbf\xbd Example 2:\n\n\xe2\x80\xa2 We also know that x \xe2\x80\x93 x = 0, but\n\n\xe2\x80\xa2 If x is NULL \xef\xbf\xbd x \xe2\x80\x93 x is NULL\n\n7\n\nComparison operations on NULLs\n\xef\xbf\xbd The result of a comparison is \xe2\x80\x9cusually\xe2\x80\x9d TRUE or FALSE\n\n\xef\xbf\xbd That is, 2 possible values or 2-valued logic\n\n\xef\xbf\xbd Comparisons involving NULLs  give rise to a 3rd truth value, \nUNKNOWN, and hence we are dealing with a 3-valued logic \n\n\xef\xbf\xbd In this case, the 3 possible values are true, false, unknown\n\n8\n\n3-Valued Logic\n\n\xef\xbf\xbd We may assume that:\n\n\xef\xbf\xbd TRUE = 1 \n\n\xef\xbf\xbd FALSE = 0\n\n\xef\xbf\xbd UNKNOWN = 1/2\n\n\xef\xbf\xbd Then: \n\n\xef\xbf\xbd x AND y = min ( x, y )\n\n\xef\xbf\xbd x OR y = max ( x, y )\n\n\xef\xbf\xbd NOT x = 1\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92x\n\n9\n\nTruth table for 3-Valued Logic\n\nX Y X AND Y X OR Y NOT X\n\nTRUE TRUE TRUE TRUE FALSE\n\nTRUE UNKNOWN UNKNOWN TRUE FALSE\n\nTRUE FALSE FALSE TRUE FALSE\n\nUNKNOWN TRUE UNKNOWN TRUE UNKNOWN\n\nUNKNOWN UNKNOWN UNKNOWN UNKNOWN UNKNOWN\n\nUNKNOWN FALSE FALSE UNKNOWN UNKNOWN\n\nFALSE TRUE FALSE TRUE TRUE\n\nFALSE UNKNOWN FALSE UNKNOWN TRUE\n\nFALSE FALSE FALSE FALSE TRUE\n\n10\n\n3-Valued Logic\n\n\xef\xbf\xbd Some key laws in logic fail to hold with NULLs\n\n\xef\xbf\xbd Example:\n\n\xef\xbf\xbd Law of the excluded middle\n\n\xe2\x80\xa2 x OR NOT x = TRUE\n\n\xef\xbf\xbd For 3-valued logic\n\n\xe2\x80\xa2 if x = UNKNOWN\xef\xbf\xbd x OR (NOT x) = \n\nmax(1/2,(1\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x921/2)) = 1/2 = UNKNOWN \xe2\x89\xa0\xe2\x89\xa0\xe2\x89\xa0\xe2\x89\xa0 (TRUE)\n\n\xe2\x80\xa2 Note: Do not treat NULL as a \xe2\x80\x9cvalue\xe2\x80\x9d\n\n(e.g., see the next example)\n\n11\n\nExample\n\xef\xbf\xbd Relation schema:\n\nMovie ( title, year, length, filmType, studioName, producerC#)\n\n\xef\xbf\xbd Consider query:\n\nSELECT *\n\nFROM Movie \nWHERE length <= 120 OR length > 120;\n\n\xef\xbf\xbd Don\xe2\x80\x99t we expect to get a copy of the Movie relation?\n\xef\xbf\xbd Yes, if there is no Movie tuple whose length is NULL\n\xef\xbf\xbd This query returns a subset of Movie tuples in general. \n\nIt returns only each Movie tuple whose length is not NULL.\n\n12\n\n\n\n3\n\nExample\n\xef\xbf\xbd Read the box on page 254 in the textbook for some rules on NULLs\n\n\xef\xbf\xbd The value NULL is ignored in any aggregation.\n\n\xef\xbf\xbd Query: \n\nSELECT COUNT(A) FROM R;\n\nreturns the number of non-null values under attribute A in R.\n\n\xef\xbf\xbd Query:\n\nSELECT COUNT(*) FROM R;\n\nreturns the number of tuples in R.\n\n\xef\xbf\xbd NULL is treated as an ordinary value in a \xe2\x80\x9cgroup by\xe2\x80\x9d  attribute.\n\n\xef\xbf\xbd Query:\nSELECT A, AVG(B) FROM R GROUP BY A;\n\nproduces a tuple for each distinct value A, including the null, if exists.\n\n13\n\nJoins in SQL\n\n\xef\xbf\xbd How to express the Cartesian product in SQL?  \n\n\xef\xbf\xbd List the relation names in the FROM clause\n\n\xef\xbf\xbd How do we express various joins in SQL?\n\n\xef\xbf\xbd Follow the Cartesian Product with conditions in the \n\nWHERE clause for the desired join\n\n14\n\nJoins in SQL2\n\xef\xbf\xbd In SQL2, there are other forms for expressing \xc3\x97\xc3\x97\xc3\x97\xc3\x97 and  \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\n\xef\xbf\xbd Cartesian Product of Movie and StarsIn\n\n\xef\xbf\xbd Movie CROSS JOIN StarsIn; (Movie \xc3\x97\xc3\x97\xc3\x97\xc3\x97 StarsIn,  in RA)\n\xef\xbf\xbd Theta- (or equi-) join of Movie and StarsIn\n\n\xef\xbf\xbd Movie JOIN StarsIn ON\n\nStarsIn.title = Movie.title AND StarsIn.year = Movie.year;\n\nNote: The result may have some redundant columns; \n\nWe can use the above expression as a subquery in a FROM\n\nclause and use SELECT to remove these undesired attributes \n\n\xef\xbf\xbd Natural join of Movie and StarsIn\n\n\xef\xbf\xbd Movie NATURAL JOIN StarsIn; 15\n\nExample\n\xef\xbf\xbd Relation schemas:\n\nExec(name, address, cert#, netWorth)\n\nStar (name, address, gender, birthdate)\n\n\xef\xbf\xbd Query:\nFind all info on all stars who are also movie executives\n\n\xef\xbf\xbd Query in SQL:\nSELECT *\n\nFROM Star NATURAL JOIN Exec;\n\n\xef\xbf\xbd The join expression appears in a FROM clause\n\n\xef\xbf\xbd Parenthesized SELECT-FROM-WHERE is also allowed in a \n\nFROM clause 16\n\nExample\n\xef\xbf\xbd Relation schemas:\n\nExec(name, address, cert#, netWorth)\n\nStar (name, address, gender, birthdate)\n\n\xef\xbf\xbd Query: Find \xe2\x80\x9call\xe2\x80\x9d information on all stars\n\n\xef\xbf\xbd Query in SQL:\nSELECT *\n\nFROM Star;\n\n\xef\xbf\xbd This query does not return all information on stars who are also \nmovie executives \n\n\xef\xbf\xbd Query in SQL\nSELECT *\n\nFROM Star NATURAL JOIN Exec ;\n\n\xef\xbf\xbd This query does NOT return stars who are not movie executives 17\n\nOuter joins\n\n\xef\xbf\xbd R OUTER JOIN S -- computes the join of R and S\n\nwith dangling tuples padded with NULLs\n\n\xef\xbf\xbd A tuple in R is dangling if it doesn\'t join with any tuple in S\n\n\xef\xbf\xbd Outer join could be\n\n\xef\xbf\xbd FULL OUTER JOIN\n\n\xe2\x80\xa2 It pads, with nulls, the dangling tuples of R and S\n\n\xef\xbf\xbd LEFT OUTER JOIN\n\n\xe2\x80\xa2 It pads dangling tuples of R only\n\n\xef\xbf\xbd RIGHT OUTER JOIN\n\n\xe2\x80\xa2 It pads dangling tuples of S only\n18\n\n\n\n4\n\nExample\n\nInstance S:Instance R:\n\nSELECT * FROM R NATURAL FULL OUTER JOIN S:\n\nB C\n\n2 5\n\n2 6\n\n7 8\n\nA B\n\n1 2\n\n2 3\n\nA B C\n\n1 2 5\n\n1 2 6\n\n2 3 NULL\n\nNULL 7 8\n\n19\n\nExample\nInstance S:Instance R:\n\nB C\n\n2 5\n\n2 6\n\n7 8\n\nA B\n\n1 2\n\n2 3\n\nA B C\n\n1 2 5\n\n1 2 6\n\n2 3 NULL\n\nR NATURAL LEFT OUTER JOIN S:\n\n20\n\nExample\nInstance S:Instance R:\n\nB C\n\n2 5\n\n2 6\n\n7 8\n\nA B\n\n1 2\n\n2 3\n\nA B C\n\n1 2 5\n\n1 2 6\n\nNULL 7 8\n\nR NATURAL RIGHT OUTER JOIN S:\n\n21\n\nOuter joins in SQL2\n\nR [NATURAL] [LEFT | RIGHT | FULL] OUTER JOIN S [ON ...]\n\n\xef\xbf\xbd Can do either a natural join \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2 or a theta-join \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2c\n\n\xef\xbf\xbd Use  NATURAL for \xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2\xe2\x8a\xb3\xe2\x8a\xb2, and use ON for theta-outer join, \nbut not both (NATURAL and ON cannot be used together)\n\n\xef\xbf\xbd Can use any one of  LEFT, RIGHT, or FULL\n\n\xef\xbf\xbd Examples:\n\n\xef\xbf\xbd R NATURAL FULL OUTER JOIN S;\n\n\xef\xbf\xbd Star NATURAL LEFT OUTER JOIN Exec; (for slide #17)\n\n\xef\xbf\xbd Movie RIGHT OUTER JOIN StarsIn ON\nStarsIn.title = Movie.title AND StarsIn.year = Movie.year;\n\n22\n\nConstraints and Triggers (Chapter 7)\n\n\xef\xbf\xbd SQL provides a variety of ways for expressing integrity\n\nconstraints as part of the database schema\n\n\xef\xbf\xbd Constraints\xe2\x80\x99 checking, in essence, provide users with more \n\ncontrol over the database content\n\n\xef\xbf\xbd An active element is a statement that we write once, store it \n\nin the database, and \xe2\x80\x9cexpect\xe2\x80\x9d it to be executed at \n\n\xe2\x80\x9cappropriate\xe2\x80\x9d times\n\n\xef\xbf\xbd The time of action might be when certain events occur (e.g., \n\ninsertion of a tuple into a relation or any change(s) made to \n\nthe database so that certain condition(s) becomes true\n23\n\nConstraints\n\xef\xbf\xbd Declaration of primary keys\n\n\xef\xbf\xbd Foreign key constraints (also see referential integrity \n\nconstraints)\n\n\xef\xbf\xbd E.g., if in relation StarsIn, it says that a star has a role in a movie \nm, then there should be a movie tuple m in Movie\n\n\xef\xbf\xbd Constraints on attributes, tuples, and relations\n\n\xef\xbf\xbd SQL2 Assertions = global/general constraints (inter-relations)\n\n\xef\xbf\xbd Not supported in Oracle\n\n\xef\xbf\xbd Triggers\n\n\xef\xbf\xbd are substitutes for \xe2\x80\x9cgeneral\xe2\x80\x9d assertions\n\n\xef\xbf\xbd SQL3 triggers and assertions\n24\n\n\n\n5\n\nPrimary Key\n\n\xef\xbf\xbd A key constraint is declared by the DDL command CREATE TABLE\n\n\xef\xbf\xbd Can use the keywords PRIMARY KEY or UNIQUE\n\xef\xbf\xbd Oracle treats them as synonyms \n\n\xef\xbf\xbd A table can only have one primary key but any number of  "unique\xe2\x80\x9d declarations\n\n\xef\xbf\xbd Two ways to declare a primary key in the CREATE TABLE statement: \n\n\xef\xbf\xbd After an attribute type, if the attribute is a key by itself\n\n\xef\xbf\xbd As a separate line, for any number of attributes forming the key: \n\nPRIMARY KEY ( list of attribute(s) ) \n\n\xe2\x80\xa2 Should use the second way if the key is not a singleton\n\n25\n\nPrimary Key\n\xef\xbf\xbd Example:\n\nCREATE TABLE Star(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\ngender CHAR(1),\n\nbirthdate DATE);\n\nThree consequences of declaring a primary key:\n\n1. Repeated values of the key attributes will not be allowed  \n\nAny violation will be rejected/failed by the DBMS\n\n2. NULLs are not allowed for the key attribute(s)\n\n3. (Another possible consequence) Creating an index on the primary \nkey, or alternatively keeping the table sorted on the key attribute(s).\n\n26\n\nPrimary Key\n\n\xef\xbf\xbd Example:\n\nCREATE TABLE Star (\n\nname CHAR(30) UNIQUE, \n\naddress VARCHAR(255) UNIQUE, \n\ngender CHAR(1),\n\nbirthdate DATE);\n\nThis is to say: no two movie stars have the same address\n\n27\n\nPrimary Key\n\xef\xbf\xbd Example:\n\nCREATE TABLE Star(\n\nname CHAR(30), \n\naddress VARCHAR(255), \n\ngender CHAR(1),\n\nbirthdate DATE, \n\nUNIQUE (name)\n\n);\n\nNote the distinction between UNIQUE and PRIMARY KEY:\n\nWhen using UNIQUE, NULLs are allowed for (all or some\n\nof)  the key attribute(s).\n28\n\nPrimary Key\n\n\xef\xbf\xbd Example:\n\nCREATE TABLE Movie (\n\ntitle CHAR(20), \n\nyear INT, \n\nlength INT, \n\nPRIMARY KEY(title, year)\n\n);\n\nHere, the key declaration must appear on a separate line,\n\nsince the key consists of more than 1 attribute (title, year)\n29\n\nForeign Keys\n\xef\xbf\xbd Referential integrity constraints: \n\nIntuitively, values for certain attributes must \xe2\x80\x9cmake sense\xe2\x80\x9d \n\n\xef\xbf\xbd That is, every non-Null value in attribute A of relation R must \nappear in attribute B of relation S -- Inclusion dependency\n\n\xef\xbf\xbd In SQL, we declare an attribute (or a set K of attributes) in a \n\nrelation (R) to be a foreign key, if they reference/point to \nsome attribute(s) G of some related relation S. \n\nThat is, t[K] = s[G] if tuple t in R refers to tuple s in S\n\n\xef\xbf\xbd The set of attributes G must be declared as the primary key of S\n\n\xef\xbf\xbd The notion of referential integrity constraint is the one that connects \n\nor relates tuples in different relations. 30\n\n\n\n6\n\nForeign Keys\n\n\xef\xbf\xbd Two ways to declare foreign keys:\n\n\xef\xbf\xbd If the foreign key is a single attribute A, we may write the \n\nfollowing after the attribute name and its type:\n\n(1) REFERENCES < referenced-table > (A)\n\n\xef\xbf\xbd When the foreign key includes more than one attribute, \n\nwrite it as a separate line in the CREATE TABLE declaration:\n\n(2)      FOREIGN KEY (<attributes>) REFERENCES <table> (<attributes>)\n\n\xe2\x80\xa2 Use form (2) if the foreign key includes 2 or more attributes\n\n31\n\nForeign Keys\n\xef\xbf\xbd Relation Schemas:\n\nExec(eName, address, cert#, netWorth)\n\nStudio (sName,   address,\xe2\x86\x96\xe2\x86\x96\xe2\x86\x96\xe2\x86\x96 presidentC#)\n\nHere, Studio(presidentC#) refers to Exec(cert#).\n\nCREATE TABLE Studio(\n\nsName CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\npresidentC#  INT REFERENCES Exec(cert#)\n\n);\n32\n\nForeign Keys\n\xef\xbf\xbd Relation Schemas:\n\nExec(eName, address, cert#, netWorth)\n\nStudio (sName, address,presidentC#)\n\nCREATE TABLE Studio(\n\nsName CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\npresidentC#  INT,\n\nFOREIGN KEY presidentC#  REFERENCES  Exec(cert#) );\n\nIn either declaration form, when a value v appears for presidentC# in \na Studio tuple, v MUST already exist for an Exec tuple.\n\nNote: An exception to this requirement is when v is NULL. 33\n\nMaintaining Referential Integrity\n\nExec(eName, address, cert#, netWorth)\nStudio (sName, address,presidentC#)\n\n\xef\xbf\xbd How to maintain referential integrity when the database is modified?\n\n\xef\xbf\xbd Possible situations violating foreign key constraints:\n\xef\xbf\xbd Insert:\n\n\xe2\x80\xa2 1. Insert a new Studio tuple with presidentC# that is not cert#  of any Exec tuple\n\n\xef\xbf\xbd Update:\n\n\xe2\x80\xa2 2. Update a Studio tuple to change its presidentC#  to a non-Null value that\n\nis not the cert# of any tuple in table Exec\n\n\xe2\x80\xa2 3. Update an Exec tuple e that changes e.cert#, when the old cert# was\n\npresidentC# of some Studio tuple s (i.e.,  e.cert#  is referenced by s)\n\n\xef\xbf\xbd Delete: \n\n\xe2\x80\xa2 4. Delete an Exec tuple when its cert# is presidentC# of 1 or more Studio tuples\n\nRecall that cert# is the key of the Exec table\n34\n\nMaintaining Referential Integrity\n\xef\xbf\xbd There are three policies, when there is a \ntransaction that violates a referential integrity:\n\n\xef\xbf\xbd The reject policy (default)\n\nThe system will reject any transaction violating referential \nintegrity constraints -- a run-time error will be generated \nand the database state will not change.\n\n\xef\xbf\xbd If we update (3) or delete (4) a referenced item:\n\n\xe2\x80\xa2 The cascade policy: changes to the referenced attributes \nare \xe2\x80\x9cmimicked\xe2\x80\x9d at the foreign key (e.g. presidentC#)\n\n\xe2\x80\xa2 The \xe2\x80\x9cset null\xe2\x80\x9d policy: set  the referencing attribute to NULL \n(e.g., presidentC# in Studio) 35\n\nMaintaining Referential Integrity\n\nExec(eName, address, cert#, netWorth)\n\nStudio (sName, address,presidentC#)\n\nExample: For the (default) reject policy, the system will reject the \nfollowing modifications/transactions:\n\n\xe2\x80\xa2 Insert a new Studio tuple with presidentC# that is not in any \nExec tuple\n\n\xe2\x80\xa2 Update a Studio tuple to change the presidentC#  to a non-null \nvalue that is not in any Exec tuple\n\n\xe2\x80\xa2 Update an Exec tuple to change cert#, when the old cert# value \nis presidentC# in some Studio tuple(s)\n\n\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some \nStudio tuple(s)\n\n36\n\n\n\n7\n\nMaintaining Referential Integrity\nExec(eName, address, cert#, netWorth)\n\nStudio (sName, address,presidentC#)\n\n\xef\xbf\xbd The cascade policy:\n\xef\xbf\xbd In case of deleting (updating) a tuple in a referenced relation (Exec), the DBMS \n\nwill delete (update) the referencing tuple(s) in Studio\n\n\xef\xbf\xbd Example:\n\xef\xbf\xbd The system will cascade the following modifications:\n\n\xe2\x80\xa2 Update Exec tuple to change cert#, when its cert# is presidentC# in some \nStudio tuple\n\n\xe2\x80\xa2 The system will update presidentC# in corresponding Studio tuple(s)\n\n\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some Studio tuple\n\n\xe2\x80\xa2 The system will delete corresponding tuple(s) in Studio\n\n37\n\nMaintaining Referential Integrity\n\xef\xbf\xbd The set-null policy:\n\n\xef\xbf\xbd In case of deleting or updating a tuple in a referenced relation (Exec), the DBMS \nwill set to NULL the corresponding values in the referencing tuples (in Studio) \n\n\xef\xbf\xbd Example:\n\xef\xbf\xbd The system will do the following modifications:\n\n\xe2\x80\xa2 Update Exec tuple to change cert#, when its cert# is presidentC# in some \n\nStudio tuple\n\n\xe2\x80\xa2 The DBMS will set to NULL presidentC# in corresponding Studio \n\ntuple(s)\n\n\xe2\x80\xa2 Delete an Exec tuple when its cert# is presidentC# in some Studio tuple(s)\n\n\xe2\x80\xa2 The DBMS will set to NULL presidentC# in the corresponding Studio \n\ntuple(s)\n\n38\n\nSelecting a Policy\n\n\xef\xbf\xbd Reaction options/policies may be chosen (by ?) for \n\ndeletes and updates, in an independent way \n\n\xef\xbf\xbd ON [DELETE | UPDATE] [CASCADE | SET NULL]\n\n39\n\nSelecting a Policy\n\n\xef\xbf\xbd Example:\n\nCREATE TABLE Studio(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\npresidentC#  INT,\n\nFOREIGN KEY presidentC# REFERENCES Exec(cert#)\n\nON DELETE SET NULL   (or SET DEFAULT)\n\nON UPDATE CASCADE\n\n);\n\n40\n\nSelecting a Policy\n\n\xef\xbf\xbd "Correct\xe2\x80\x9c or \xe2\x80\x9cright\xe2\x80\x9d policy is a design decision\n\n\xef\xbf\xbd Example:\n\n\xef\xbf\xbd If a studio president retires (and its tuple gets deleted), the \n\nstudio should exist with a NULL value for the president \n\nand not be deleted along with the president\n\n\xef\xbf\xbd If the certificate number cert# of a studio president was \n\nchanged (by an update), it should be updated in all \n\ncorresponding places (presidentC# in Studio, in our case);\nwe should not lose the information on who is the current \n\npresident of a given studio\n41\n\nNot-Null Constraints\n\n\xef\xbf\xbd We can assert that the value of an attribute may not be \nNULL \n\n\xef\xbf\xbd Example:\npresidentC# INT REFERENCES Exec(cert#) NOT NULL\n\nTwo consequences:\n1. We can\xe2\x80\x99t insert a tuple into Studio by just specifying name and\n\naddress; the value presidentC# must also be present.\n\n2. We can\xe2\x80\x99t use the \xe2\x80\x9cset-null\xe2\x80\x9d policy to fix foreign key violations by\nchanging presidentC# to be NULL\n\n42\n\n\n\n8\n\nAttribute-Based Checks\n\xef\xbf\xbd Aside from \xe2\x80\x9creferencing\xe2\x80\x9d, more complex constraints can be \n\nattached to an attribute declaration, followed by \n\nCHECK (condition-on-attribute)\n\n\xef\xbf\xbd That is, we want the condition to hold for that attribute in \n\nevery tuple in the relation\n\n\xef\xbf\xbd Condition may involve the checked attribute\n\n\xef\xbf\xbd Other attributes and relations may be involved, but only in\n\nsubqueries (see slide #46)\n\n\xe2\x80\xa2 Oracle : No subqueries allowed in the condition\n\n43\n\nAttribute-Based Checks\n\n\xef\xbf\xbd Example:\n\nCREATE TABLE Studio(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\npresidentC#  INT \n\nCHECK (presidentC# >= 100000)\n\n);\n\nThis requires certificate numbers to be at least 6 digits.\n\n44\n\nAttribute-Based Checks\n\nWhen an attribute-based check/condition is (not) done?\n\n\xef\xbf\xbd The condition is checked \n\n\xe2\x80\xa2 When the associated attribute changes, i.e., an insert or \n\nupdate occurs\n\n\xef\xbf\xbd The condition is NOT checked \n\n\xe2\x80\xa2 When the relations involved in the subquery of the condition \n\nare changed; see the next slide\n\n45\n\nAttribute-Based Checks\n\n\xef\xbf\xbd Example:\nCREATE TABLE Studio(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\npresidentC#  INT \n\nCHECK (presidentC# IN (SELECT cert# FROM Exec))\n\n);\n\n\xef\xbf\xbd Is this check the same as a foreign-key constraint?\n\n\xe2\x80\xa2 Not really! The above check is done only when we insert a \n\ntuple in Studio or change the presidentC# in an existing \ntuple in Studio, not when deleting or update a tuple in Exec46\n\nAttribute-Based Checks\n\n\xef\xbf\xbd Example:\nCREATE TABLE Star(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255),\n\nbirthdate DATE, \n\ngender CHAR(1) CHECK (gender IN (\xe2\x80\x99F\xe2\x80\x99, \xe2\x80\x99M\xe2\x80\x99))\n\n);\n\nThe above condition uses an explicit set/relation with two tuples,\n\nproviding possible values for attribute gender\n\n47\n\nTuple-Based Checks\n\n\xef\xbf\xbd We restrict some components of the tuples of a \n\nrelation by a tuple-based check\n\n\xef\xbf\xbd Tuple-based check must appear on a separate \n\nelement/part in a table declaration command\n\n\xef\xbf\xbd Format:\n\nCHECK (condition)\n\xef\xbf\xbd Condition may involve any attribute(s) of the table\n\n\xef\xbf\xbd Other attributes and tables may be involved, but only in subqueries\n\n\xe2\x80\xa2 Oracle: Does not support subqueries in condition\n\n48\n\n\n\n9\n\nTuple-Based Checks\n\n\xef\xbf\xbd Example:\nCREATE TABLE Star(\n\nname CHAR(30) PRIMARY KEY, \n\naddress VARCHAR(255), \n\ngender CHAR(1),\n\nbirthdate DATE, \n\nCHECK (gender = \xe2\x80\x99F\xe2\x80\x99 OR name NOT LIKE \xe2\x80\x99Ms.%\xe2\x80\x99)\n\n);\n\nThis constraint says that if a \xe2\x80\x9cstar is male\xe2\x80\x9d (M), then \xe2\x80\x9chis name \nmust not begin with Ms.\xe2\x80\x9d (~L), i,e, M\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92~L, or ~M \xe2\x88\xa8\xe2\x88\xa8\xe2\x88\xa8\xe2\x88\xa8 ~L\n\n49\n\nModifications of Constraints\n\n\xef\xbf\xbd We can add, modify, or delete constraints at any time\n\n\xef\xbf\xbd Give names to constraints so we can \xe2\x80\x9crefer\xe2\x80\x9d to them later\n\nExamples of defining constraints:\n\nname CHAR(30) CONSTRAINTName-Is-Key PRIMARY KEY,\n\nOR\nCONSTRAINT RightTitle CHECK (gender = \xe2\x80\x99F\xe2\x80\x99 OR name NOT LIKE \xe2\x80\x99Ms.%\xe2\x80\x99)\n\nExamples of modifying (deleting/adding) constraints:\n\nALTER TABLE Star DROP CONSTRAINT Name-Is-Key;\n\nOR\n\nALTER TABLE Star ADD CONSTRAINT NameIsKey PRIMARY KEY (name);\n50\n\nAssertions\n\xef\xbf\xbd Assertions, also called \xe2\x80\x9cgeneral constraints\xe2\x80\x9d, are  boolean-\n\nvalued SQL expressions that must always be satisfied\n\n\xef\xbf\xbd Sometimes we need a constraint that involves a relation as a \n\nwhole or part of the database schema\n\n(This is not supported in Oracle)\n\n\xef\xbf\xbd Assertions are checked when a specified relation changes\n\n\xef\xbf\xbd Syntax:\n\nCREATE ASSERTION < assertion-name > CHECK (< condition >);\n\nNote: Unlike attribute/tuple based checks, assertions are defined \noutside table declarations. \n\n51\n\nAssertions\n\n\xef\xbf\xbd Relation schemas:\nExec (name, address, cert#, netWorth) \nStudio (name, address, presidentC#)\n\n\xef\xbf\xbd Assertion in SQL:\n\nCREATE ASSERTION RichPresident CHECK\n\n(NOT EXIST (SELECT *\n\nFROM Studio, Exec\n\nWHERE Studio.presidentC# = Exec.cert# AND\n\nExec.netWorth < 10000000\n\n)\n\n);\n\n\xef\xbf\xbd This constraint is checked when Studio and/or Exec tables change\n52\n\nTriggers\n\xef\xbf\xbd Also called event-condition-action (ECA) rules\n\n\xef\xbf\xbd Event\n\n\xef\xbf\xbd DB transactions (Insertion, Deletion, Update)\n\n\xef\xbf\xbd Condition\n\n\xef\xbf\xbd A condition to check if a trigger applies\n\n\xef\xbf\xbd Action\n\n\xef\xbf\xbd One or more SQL statements to be executed if a \n\ntriggering event occurred and the condition(s) holds.\n\n53\n\nTriggers\n\xef\xbf\xbd Triggers are not supported in SQL2\n\n\xef\xbf\xbd Oracle\xe2\x80\x99s version and SQL3 version differ\n\nfrom Checks or SQL2 assertions in that:\n\n\xef\xbf\xbd For triggers, event is \xe2\x80\x9cprogrammable\xe2\x80\x9d, rather than implied\nby the kind of check\n\n\xef\xbf\xbd For checks, we don\xe2\x80\x99t have conditions specified\n\n\xef\xbf\xbd (Re)action could be any sequence of database operations\n\n\xef\xbf\xbdActive Database Management Systems (ADBMS)\n54\n\n\n\n10\n\nTriggers\nRelation Schema: Exec(name, address, cert#, networth)\n\nExample of an SQL trigger:\n\nCREATE TRIGGER NetWorthTrigger\n\nAFTER UPDATE OF netWorth ON Exec                    \xef\x83\xa7 Event\n\nREFERENCING\n\nOLD ROW AS OldTuple, \n\nNEW ROW AS NewTuple\n\nFOR EACH ROW\n\nWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)    \xef\x83\xa7 [Condition]\n\nUPDATE Exec                                                         \xef\x83\xa7 Action\n\nSET netWorth = OldTuple.netWorth\n\nWHERE cert# = NewTuple.cert#; 55\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER UPDATE OF netWorth ON Exec\nREFERENCING\nOLD ROW AS OldTuple, \nNEW ROW AS NewTuple \n\nFOR EACH ROW\nWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)\nUPDATE Exec\nSET netWorth = OldTuple.netWorth\nWHERE cert# = NewTuple.cert#;\n\n\xef\xbf\xbd AFTER could be changed to either: \n\n\xef\xbf\xbd BEFORE\n\n\xef\xbf\xbd INSTEAD OF 56\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER UPDATE OF netWorth ON Exec\nREFERENCING\nOLD ROW AS OldTuple, \nNEW ROW AS NewTuple \n\nFOR EACH ROW\nWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)\nUPDATE Exec\nSET netWorth = OldTuple.netWorth\nWHERE cert# = NewTuple.cert#;\n\n\xef\xbf\xbd OF in \xe2\x80\x98UPDATE OF\xe2\x80\x99 is optional \n\n\xef\xbf\xbd If present, it defines the event to be only an update of the \nattribute(s) listed after the keyword OF 57\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER UPDATE OF netWorth ON Exec\nREFERENCING\nOLD ROW AS OldTuple, \nNEW ROW AS NewTuple\n\nFOR EACH ROW\nWHEN (OldTuple.netWorth >>>> NewTuple.netWorth)\nUPDATE Exec\nSET netWorth = OldTuple.netWorth\nWHERE cert# = NewTuple.cert#;\n\n\xef\xbf\xbd UPDATE (OF whatever) could be changed to: \n\n\xef\xbf\xbd INSERT\n\n\xef\xbf\xbd DELETE 58\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER INSERT ON Exec\nREFERENCING\nOLD ROW AS OldTuple, \nNEW ROW AS NewTuple\n\nFOR EACH ROW\nWHEN (NewTuple.netWorth < 10000000)\nDELETE Exec\nWHERE cert# = NewTuple.cert#;\n\n\xef\xbf\xbd If the event is INSERT:\n\n\xef\xbf\xbd REFERENCING\nNEW ROW AS NewTuple\n\n\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7 OLD makes no sense!\n\n59\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER DELETE ON Exec\nREFERENCING\nOLD ROW AS OT, \nNEW ROW AS NT\n\nFOR EACH ROW\nWHEN (10000000 > (SELECT AVG(netWorth) FROM Exec))\nINSERT INTO Exec\nVALUES (OT.name,OT.address,OT.cerf#,OT.netWorth);\n\n\xef\xbf\xbd If event is DELETE:\n\n\xef\xbf\xbd REFERENCING\nOLD ROW AS OldTuple\n\n\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7\xef\x83\xa7 NEW makes no sense!\n\n60\n\n\n\n11\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER UPDATE OF netWorth ON Exec\nREFERENCING\nOLD ROW AS OldTuple, \nNEW ROW AS NewTuple\n\nFOR EACH ROW\nWHEN (OldTuple.netWorth > NewTuple.netWorth)\nUPDATE Exec\nSET netWorth = OldTuple.netWorth\nWHERE cert# = NewTuple.cert# ;\n\n\xef\xbf\xbd The action could be any sequence of SQL statements, separated \nby semicolons and embeded in a pair of BEGIN and END, e.g.,     \nWHEN condition BEGIN S1; \xe2\x80\xa6 Sk; END;\n\n61\n\nTriggers\nCREATE TRIGGER NetWorthTrigger\nAFTER UPDATE OF netWorth ON Exec\nREFERENCING\nOLD ROW AS OldTuple,\nNEW ROW AS NewTuple\n\nFOR EACH ROW\nWHEN (OldTuple.netWorth > NewTuple.netWorth)\nUPDATE Exec\nSET netWorth = OldTuple.netWorth\nWHERE cert# = NewTuple.cert#;\n\n\xef\xbf\xbd This trigger is row-level trigger\n\n\xef\xbf\xbd If we omit \xe2\x80\x9cFOR EACH ROW\xe2\x80\x9d, the trigger becomes a \nstatement-level trigger, which is the default 62\n\nTriggers\n\xef\xbf\xbd If we update an \xe2\x80\x9centire\xe2\x80\x9d table with an SQL statement\n\n\xef\xbf\xbd A row-level trigger will be executed once for each tuple\n\n\xef\xbf\xbd A statement-level trigger will be executed only once for the entire \nupdate\n\n\xef\xbf\xbd In a statement-level trigger:\n\xef\xbf\xbd We can not refer to old and new tuples\n\n\xef\xbf\xbd Instead, we can/should refer to \n\n\xe2\x80\xa2 The collection of old tuples as OLD TABLE\n\n\xe2\x80\xa2 The collection of new tuples as NEW TABLE\n\n63\n\nTriggers\n\xef\xbf\xbd Ex: Constraint: \xe2\x80\x9cThe average net worth of executives may NOT drop below \n\n$500,000.\xe2\x80\x9d  This could be violated e.g., by updating netWorth, or deleting or inserting \ntuples from/into Exec. \n\n\xef\xbf\xbd Below is a trigger for update; similar triggers must be written for  delete and insert.\n\nCREATE TRIGGER AvgNetWorthTrigger\n\nAFTER UPDATE OF netWorth ON Exec\n\nREFERENCING\n\nOLD TABLE  AS OldStuff,\n\nNEW TABLE AS NewStuff\n\nFOR EACH STATEMENT\n\nWHEN (500000 >>>> (SELECT  AVG(networth) FROM Exec))\n\nBEGIN\n\nDELETE FROM Exec\n\nWHERE (name, address, cert#, netWorth) IN NewStuff ;\n\nINSERT INTO Exec(SELECT * FROM OldStuff) ;\nEND; 64\n\nTriggers\nRelation scheme: Employee(name, empId, salary, dept, supervisorId)\n\nConstraint: No employee gets a salary more than his/her supervisor.\n\nCREATE TRIGGER Inform_supervisor\n\nBEFORE INSERT OR UPDATE OF salary, supervisorId ON Employee\n\nNEW ROW AS new\n\nFOR EACH ROW\n\nWHEN (new.salary > (SELECT salary \n\nFROM Employee \n\nWHERE empId=new.supervisorId))\n\nBegin\n\nROLLBACK;\n\nInform_Supervisor(new.supervisorId, new.empId);\n\nEnd;\n65\n\nInstead-Of Triggers\n\nRelation Scheme: Movie(title, year, length, filmType, studioName, producerC#)\n\nCREATE VIEW ParamountMovie AS\n\nSELECT title, year\n\nFROM Movie\n\nWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;\n\nThe following trigger replaces an insertion on the view (ParamountMovie) with an\n\ninsertion on its underlying base table (Movie)\n\nCREATE TRIGGER ParamountInsert\n\nINSTEAD OF INSERT ON ParamountMovie\n\nREFERENCING NEW ROW AS NewRow\n\nFOR EACH ROW\n\nINSERT INTO Movie(title, year, studioName)\n\nVALUES (NewRow.title, NewRow.year, \xe2\x80\x99Paramount\xe2\x80\x99); 66\n\n\n\n12\n\nA test on Triggers!\n\nSuppose relation rel(a, b) has no tuples. Consider the trigger:\n\nCREATE TRIGGER T\n\nAFTER INSERT ON rel\n\nREFERENCING NEW ROW AS newRow\n\nFOR EACH ROW\n\nWHEN (newRow.a * newRow.b > 10)\n\nINSERT INTO rel VALUES(newRow.a - 1, newRow.b + 1);\n\nInserting which of  the following tuples into relation rel results in having exactly 2 \ntuples in rel?\n\n1. (3, 5)\n\n2. (4, 3)\n\n3. (3, 4) \n\n4. (5, 3)\n67\n\n\n'