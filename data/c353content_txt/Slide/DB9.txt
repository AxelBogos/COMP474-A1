b'Microsoft PowerPoint - DB9.ppt [Compatibility Mode]1COMP353 DatabasesMore on SQL:Nested Querie Nested Querie Nested Querie Nested Querie ViewsViewsViewsViews1Scalar Values\xef\xbf\xbd An SQL query is an expression that evaluates to a collection of tuples, i.e., it produces a relation/bag\xef\xbf\xbd This \xe2\x80\x9ccollection\xe2\x80\x9d may have only one attribute\xef\xbf\xbd It is also possible that there will be only one single value produced for that attribute\xef\xbf\xbd If all these hold, then we say that the query produces a scalar value\xef\xbf\xbd Scalar values \xe2\x80\x93 example include simple values such as integers, reals, strings, dates, etc.2Queries that Produce Scalar Values\xef\xbf\xbd Relation schema:Movie( title, year, length, filmType, studioName, producerC# )\xef\xbf\xbd Query:Find certificate number of the producer of \xe2\x80\x9cStar Wars\xe2\x80\x9d\xef\xbf\xbd Query in SQL:SELECT producerC#FROMMovieWHERE title = \xe2\x80\x99Star Wars\xe2\x80\x99;Assuming that we have only one such movie.3Subqueries\xef\xbf\xbd Conditions in the WHERE clause may have comparisons that involve scalar values\xef\xbf\xbd A SQL query can produce a scalar value\xef\xbf\xbd If so, we can use such SELECT-FROM-WHERE expression, surrounded by parentheses, as if it were a constant\xef\xbf\xbd Subquery \xe2\x80\x93 a query within a queryThe result of a SQL subquery is a collection (relation/bag)4Example\xef\xbf\xbd Relation schemas:Movie (title, year, length, filmType, studioName, producerC#)Exec (name, address, cert#, netWorth)\xef\xbf\xbd Query:Find the name of the producer of \xe2\x80\x9cStar Wars\xe2\x80\x9d\xef\xbf\xbd Query in SQL:SELECT Exec.nameFROMMovie, ExecWHERE Movie.title = \xe2\x80\x99Star Wars\xe2\x80\x99 ANDMovie.producerC# = Exec.cert#;5Example\xef\xbf\xbd Relation schemas:Movie (title, year, length, filmType, studioName, producerC#)Exec (name, address, cert#, netWorth)\xef\xbf\xbd Query:Find the name of the producer of \xe2\x80\x9cStar Wars\xe2\x80\x9d\xef\xbf\xbd Query with Subquery:SELECT nameFROM ExecWHERE cert# = ( SELECT producerC#FROMMovieWHERE title = \xe2\x80\x99Star Wars\xe2\x80\x99 );62Conditions Involving Relations\xef\xbf\xbd There are a number of SQL checks/conditions that can be done on a relation R and produce a booleanvalue \xef\xbf\xbd These conditions can be negated by putting a NOTbefore them\xef\xbf\xbd Typically, R above is the result of an SQL subquery, shown as: (R)\xef\xbf\xbd If such a condition involves a scalar value s or a tuple, we should make sure its type matches R.7Conditions Involving Relations\xef\xbf\xbd \xe2\x80\x9cEXISTS (R)\xe2\x80\x9d is a condition that is true iff R is not empty\xef\xbf\xbd \xe2\x80\x9cs IN (R)\xe2\x80\x9d is true iff s is equal to one of the values in R\xef\xbf\xbd \xe2\x80\x9cs NOT IN (R)\xe2\x80\x9d is true iff s is not equal to any  value in R\xef\xbf\xbd \xe2\x80\x9cS >>>> ALL (R)\xe2\x80\x9d is true iff s is greater than every value in R\xef\xbf\xbd \xe2\x80\x9c>>>>\xe2\x80\x9d could be replaced by other operators with the analogous meaning\xef\xbf\xbd Note: \xe2\x80\x9cs <> ALL (R)\xe2\x80\x9d is the same as \xe2\x80\x9cs NOT IN R\xe2\x80\x9d\xef\xbf\xbd \xe2\x80\x9cs >>>> ANY (R)\xe2\x80\x9d is true iff s is >>>> at least one value in R\xef\xbf\xbd \xe2\x80\x9c>>>>\xe2\x80\x9d could be replaced by any of the other 5 comparison operators with the analogous meaning\xef\xbf\xbd Note: \xe2\x80\x9cs = ANY (R)\xe2\x80\x9d is the same as \xe2\x80\x9cs IN R\xe2\x80\x9d 8Conditions Involving Tuples\xef\xbf\xbd A tuple in SQL is represented by a parenthesized list of scalar values; the concept \xe2\x80\x9ctuple\xe2\x80\x9d can be viewed as an extension of the concept of scalar;\xef\xbf\xbd (123, \xe2\x80\x99foo\xe2\x80\x99)\xef\xbf\xbd Mixing of constants and attributes is also permitted in tuples\xef\xbf\xbd (123, Movie.title)\xef\xbf\xbd If a tuple t has the same number of components as a relation R, then it makes sense to compare t and R like:\xef\xbf\xbd t  IN (R)  -- this is true iff t is in R\xef\xbf\xbd t <> ANY (R) -- this is true R includes a tuple other than t9Example\xef\xbf\xbd Relation schemas:Movie (title, year, length, filmType, studioName, producerC#)Exec (name, address, cert#, netWorth)StarsIn (title, year, starName)\xef\xbf\xbd Query: Find the names of the producers of Harrison Ford\xe2\x80\x99s movies\xef\xbf\xbd Query in SQL:SELECT nameFROM ExecWHERE cert# IN (SELECT producerC#FROMMovieWHERE (title, year) IN (SELECT title, yearFROM StarsInWHERE starName = \xe2\x80\x99Harrison Ford\xe2\x80\x99)); 10Example\xef\xbf\xbd Relation schemas:Movie(title, year, length, filmType, studioName, producerC#)Exec(name, address, cert#, netWorth)StarsIn(title, year, starName)\xef\xbf\xbd Query:Find names of the producers of Harrison Ford\xe2\x80\x99s movies\xef\xbf\xbd Query in SQL:SELECT Exec.nameFROM Exec, Movie, StarsInWHERE Exec.cert# = Movie.producerC# AND Movie.title = StarsIn.title ANDMovie.year = StarsIn.year AND starName = \xe2\x80\x99Harrison Ford\xe2\x80\x99;11Correlated Subqueries\xef\xbf\xbd Simple subqueries can be evaluated once and the result be used in a higher level (calling) query\xef\xbf\xbd A more complex use of nested subquery requires the subquery to be evaluated many times, once for each assignment of a value (to some term in the subquery) that comes from a tuple variable in the calling query\xef\xbf\xbd A subquery of this type is called correlated subquery123Correlated Subqueries\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd Query:Find movie titles that appear more than once\xef\xbf\xbd Query in SQL:SELECT titleFROMMovie OldWHERE year < ANY (SELECT yearFROM MovieWHERE title = Old.title);Note the scopes of the variables in this query.13Correlated Subqueries\xef\xbf\xbd Query in SQLSELECT titleFROMMovie OldWHERE year <<<< ANY (SELECT yearFROM MovieWHERE title = Old.title);\xef\xbf\xbd The condition in the outer WHERE is true only if there is a movie with  same title as Old.title that has a later year \xef\xbf\xbd The query will produce a title one fewer times than there are movies with that title\xef\xbf\xbd What would be the result if we used \xe2\x80\x9c<><><><>\xe2\x80\x9d, instead of \xe2\x80\x9c<<<<\xe2\x80\x9d ?\xef\xbf\xbd For a movie title appearing 3 times, we would get 3 copies of the title in the output14Views\xef\xbf\xbd View is a table/relation defined in a database but has no tuples explicitly stored for it in the database but rather computed, when needed, from the view definition\xef\xbf\xbd The view mechanism provides support for:\xef\xbf\xbd Logical data independence:\xe2\x80\xa2 Views can be used to define relations in the external schema that mask, from the applications/users, changes in the conceptual database schema\xe2\x80\xa2 If the schema of a relation is changed, we can define a view with the old schema so that applications that use the old schema can continue using it \xef\xbf\xbd Security:\xe2\x80\xa2 Views can be used to restricts the users access only the information they are allowed to \xe2\x80\x9csee and operate on\xe2\x80\x9d15Views\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd View:Create the Paramount\xe2\x80\x99s movies (title and year)\xef\xbf\xbd View in SQL:CREATE VIEW ParamountMovie ASSELECT title, yearFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;16Views\xef\xbf\xbd A view can be used in defining new queries/views in exactly the same way as an explicitly stored table may be used \xef\xbf\xbd Example to query the (virtual) relation ParamountMovieSELECT titleFROM ParamountMovieWHERE year = 1979;\xef\xbf\xbd This query is translated, by the query processor, into:SELECT titleFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99 AND year = 1979;17Views\xef\xbf\xbd Relation schema:ParamountMovie (title, year )StarsIn(title, year, starName)\xef\xbf\xbd Query:List the stars of the movies made by Paramount.\xef\xbf\xbd Query in SQLSELECT DISTINCT StarsIn.starNameFROM ParamountMovie, StarsInWHERE ParamountMovie.title = StarsIn.title ANDParamountMovie.year = StarsIn.year;184Views\xef\xbf\xbd Relation schema:Movie (title, year, length, filmType, studioName, producerC#)Exec (name, address, cert#, netWorth)\xef\xbf\xbd View:Define a view of Movie (titles and executives/producers)\xef\xbf\xbd View in SQL:CREATE VIEW MovieProd ASSELECT Movie.title, Exec.nameFROMMovie, ExecWHERE Movie.producerC# = Exec.cert#;19Views\xef\xbf\xbd Relation schema:MovieProd (title, name)\xef\xbf\xbd Query:Find the name of the producer of \xe2\x80\x98Gone With the Wind\xe2\x80\x99?\xef\xbf\xbd Query in SQL:SELECT nameFROMMovieProdWHERE title = \xe2\x80\x99Gone With the Wind\xe2\x80\x99;20Views\xef\xbf\xbd Renaming attributes used in view definitions\xef\xbf\xbd We can give new names to view attributes rather than using the names that come out of query defining the view\xef\xbf\xbd Example:CREATE VIEW MovieProd (MovieTitle, ProducerName) ASSELECT Movie.title, Exec.nameFROMMovie, ExecWHERE Movie.producerC# = Exec.cert#;21Views\xef\xbf\xbd Relation schema:MovieProd (MovieTitle, ProducerName)\xef\xbf\xbd Query:Find the name of the producer of \xe2\x80\x98Gone With the Wind\xe2\x80\x99?\xef\xbf\xbd Query in SQL:SELECT ProducerNameFROMMovieProdWHERE MovieTitle = \xe2\x80\x99Gone With the Wind\xe2\x80\x99;22Updating Views?\xef\xbf\xbd We saw that a view can appear in a query in exactly the same way as a \xe2\x80\x9cbase\xe2\x80\x9d table may appear.\xef\xbf\xbd What about modifications/updates?\xef\xbf\xbd What does it mean to update a view?\xef\xbf\xbd Translate modification of the view to the corresponding modification on the base tables used in the view definition\xef\xbf\xbd Should we allow updates on views?\xef\xbf\xbd Yes, in principle, but some problems may arise\xef\xbf\xbd Some \xe2\x80\x9csimple\xe2\x80\x9d views can be updated\xef\xbf\xbd Such views are called updatable views\xef\xbf\xbd Many views cannot be updated\xef\xbf\xbd This is due to the so called view-update anomaly23Insertion into Views?\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd View: Recall the definition of ParamountMovieCREATE VIEW ParamountMovie ASSELECT title, yearFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;\xef\xbf\xbd Update statement:INSERT INTO ParamountMovie (title,year) VALUES(\xe2\x80\x99KK\xe2\x80\x99, 2002);\xef\xbf\xbd Result: the following tuple being added to Movie(\xe2\x80\x99KK\xe2\x80\x99, 2002, NULL, NULL, NULL, NULL)   What\xe2\x80\x99s the problem? 245Insertion into Views?\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd An updatable view:CREATE VIEW ParamountMovie ASSELECT title, year, studioNameFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;\xef\xbf\xbd Update statement:INSERT INTO ParamountMovie VALUES(\xe2\x80\x99KK\xe2\x80\x99,2002,\xe2\x80\x99Paramount\xe2\x80\x99);\xef\xbf\xbd Result: the following tuple is being added to Movie(\xe2\x80\x99KK\xe2\x80\x99, 2002, NULL, NULL, \xe2\x80\x99Paramount\xe2\x80\x99, NULL)  Problem solved! 25Insertion into Views?\xef\xbf\xbd Relation schemas:Movie(title, year, length, filmType, studioName, producerC# )Exec(name, address, cert# , netWorth)\xef\xbf\xbd View in SQL:CREATE VIEW MovieProd ASSELECT Movie.title, Exec.nameFROM Movie, ExecWHERE Movie.producerC# = Exec.cert#;\xef\xbf\xbd Update statementINSERT INTO MovieProd (title,name) VALUES(\xe2\x80\x99The Movie\xe2\x80\x99, \xe2\x80\x99J. Smith\xe2\x80\x99);\xef\xbf\xbd Result: these tuples are added to the corresponding relations:Movie(\xe2\x80\x99The Movie\xe2\x80\x99, NULL, NULL, NULL, NULL, NULL) Exec(\xe2\x80\x99J. Smith\xe2\x80\x99, NULL, NULL, NULL)     Problems? The insertion command will fail !26Deletion from Views?\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd View: Recall the definition :CREATE VIEW ParamountMovie ASSELECT title, year, studioNameFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99;\xef\xbf\xbd Delete statement:DELETE FROM ParamountMovie WHERE title LIKE \xe2\x80\x99%K%\xe2\x80\x99;  \xef\xbf\xbd Translated query:DELETE FROM Movie WHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99 AND title LIKE \xe2\x80\x98%K%\xe2\x80\x99;27Updating Views?\xef\xbf\xbd Relation schema:Movie(title, year, length, filmType, studioName, producerC#)\xef\xbf\xbd View:CREATE VIEW ParamountMovie ASSELECT title, year,studioNameFROM MovieWHERE studioName = \xe2\x80\x99Paramount\xe2\x80\x99; \xef\xbf\xbd The view update statement:UPDATE ParamountMovie SET year = 1797 WHERE title =\xe2\x80\x98KK\xe2\x80\x99;\xe2\x80\xa2 We may drop a view: DROP VIEW ParamountMovie; 28Updating Views?\xef\xbf\xbd Recall: updating views includes insertion, deletion, and changing data\xef\xbf\xbd SQL provides a formal definition of when modifications to a view are permitted\xef\xbf\xbd Roughly, this is permitted when the view is defined by selecting some attributes from one relation R, which could be an \xe2\x80\x9cupdatable\xe2\x80\x9d view itself\xef\xbf\xbd The list in the SELECT clause includes \xe2\x80\x9cenough\xe2\x80\x9d attributes that for every tuple inserted into the view, the tuple inserted into the base relation will \xe2\x80\x9cyield\xe2\x80\x9d the inserted tuple of the view \xef\xbf\xbd The NOT NULL constraints on the base table will not be violated\xef\xbf\xbd The view definition uses SELECT (but not  SELECT DISTINCT) \xef\xbf\xbd The WHERE clause does not involve R in a subquery29'