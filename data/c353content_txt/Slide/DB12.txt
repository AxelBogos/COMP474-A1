b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMicrosoft PowerPoint - DB12.ppt [Compatibility Mode]\n\n\n1\n\nCOMP353 Databases\n\nDatabase Design:\n\nObject Definition \n\nLanguage (ODL)\n\nODL\n\n\xef\xbf\xbd ODL (Object Definition Language) is a standard \n\ntext-based language for describing the structure of \n\ndatabases\n\n\xef\xbf\xbd ODL is an extension of IDL (Interface Description \n\nLanguage), a component of CORBA (Common \n\nObject Request Broker Architecture) \n\nObject Oriented World\n\n\xef\xbf\xbd In an object oriented design, the \xe2\x80\x9cworld\xe2\x80\x9d we want to model \nis thought of as being composed of objects\n\n\xef\xbf\xbd Everything is an object\n\xef\xbf\xbd people\n\n\xef\xbf\xbd bank accounts\n\n\xef\xbf\xbd airline flights\n\n\xef\xbf\xbd Every object has a unique object id (OID)\n\n\xef\xbf\xbd Every object is an instance of a class\n\n\xef\xbf\xbd A class simply represents a grouping of similar objects\n\n\xef\xbf\xbd All objects that are instances of the same class have the \nsame properties and behaviors\n\nClass Declarations\n\n\xef\xbf\xbd A declaration of a class in ODL consists of:\n\n\xef\xbf\xbd The keyword class\n\n\xef\xbf\xbd The name of the class\n\n\xef\xbf\xbd A bracketed { \xe2\x80\xa6} list of properties of the class\n\nclass <name> {\n\n<list of properties>\n\n};\n\nclass Movie {\n\n\xe2\x80\xa6\n\n};\n\nProperties of ODL classes\n\n\xef\xbf\xbd ODL classes can have three kinds of properties:\n\n\xef\xbf\xbd Attributes\n\n\xe2\x80\xa2 properties whose types are built from primitive/basic types\n\nsuch as integers, strings,\xe2\x80\xa6\n\n\xef\xbf\xbd Relationships\n\n\xe2\x80\xa2 properties whose type is either a reference to an object\n\nor a collection of such references\n\n\xef\xbf\xbd Methods\n\n\xe2\x80\xa2 functions that may be applied to objects of the class \n\nAttributes in ODL\n\n\xef\xbf\xbd Attributes are the simplest kinds of properties\n\n\xef\xbf\xbd An attribute describes some aspect of an object\n\nby associating, with the object, a value of some \n\nsimple type\n\n\xef\xbf\xbd For example, attributes of a Student object\n\n\xef\xbf\xbd Student ID\n\n\xef\xbf\xbd Name\n\n\xef\xbf\xbd Address\n\n\xef\xbf\xbd E-mail\n\n\n\n2\n\nKeys in ODL\n\xef\xbf\xbd In ODL, we declare keys using the keyword key\n\n\xef\xbf\xbd If a key has more than one attribute, we surround them by (\xe2\x80\xa6)\n\n\xe2\x80\xa2 Example: (two attributes forming a key)\n\nclass Movie\n\n(extent Movies key (title, year) ) {\n\nattribute string title; \n\n\xe2\x80\xa6 \n\n}; \n\n\xef\xbf\xbd If a class has > one key, we may list them all, separated by commas \n\n\xe2\x80\xa2 Example: (A class with two keys)\n\nclass Employee \n\n(extent Employees key empID, SIN) {\xe2\x80\xa6};\n\nSingle-Value Constraints in ODL\n\n\xef\xbf\xbd Often, we should enforce properties in the \n\ndatabase saying that there is at most one value \n\nplaying a particular role \n\n\xef\xbf\xbd For example:\n\n\xe2\x80\xa2 that a movie object has a unique title, year, length,  etc \n\n\xe2\x80\xa2 that a movie is owned by a unique studio\n\nSingle-Value Constraints\n\n\xef\xbf\xbd In ODL:\n\xef\xbf\xbd An attribute is not of a collection type \n\n(Set, Bag, Array, List, Dictionary are collection types.)\n\n\xef\xbf\xbd A relationship is either a class type or (a single use of) a \ncollection type constructor applied to a class type. \n\n\xef\xbf\xbd Recall that in the E/R notation:\n\xef\xbf\xbd attributes are atomic\n\n\xef\xbf\xbd an arrow (\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92) can be used to express the multiplicity of \nrelationships (1:1), (1:M), and (N:M) \n\nType system\n\nA type system consists of\n\n\xef\xbf\xbd Basic types\n\n\xef\xbf\xbd Type constructors\n\n\xe2\x80\xa2 recursive rules whereby complex types are built from \n\nsimpler ones\n\nBasis of types in ODL\n\n\xef\xbf\xbd Primitive types (atomic)\n\n\xef\xbf\xbd Integer\n\n\xef\xbf\xbd Float\n\n\xef\xbf\xbd Char\n\n\xef\xbf\xbd Character String\n\n\xef\xbf\xbd Boolean\n\n\xef\xbf\xbd Date\n\n\xef\xbf\xbd Enumeration (a list of names declared to be synonyms for integers\n\n\xef\xbf\xbd Class types\n\n\xef\xbf\xbd Movie\n\nType constructors in ODL\n\xef\xbf\xbd Set\n\n\xef\xbf\xbd Set <integer>\n\xef\xbf\xbd Set <Movie>\n\n\xef\xbf\xbd Bag\n\xef\xbf\xbd Bag <integer>\n\xef\xbf\xbd Bag <Movie>\n\n\xef\xbf\xbd Array\n\xef\xbf\xbd Array <integer, 10>\n\xef\xbf\xbd Array <Movie, 3>\n\n\xef\xbf\xbd Structure\n\xef\xbf\xbd Struct Address {string street, string city} \n\n\xef\xbf\xbd List\n\xef\xbf\xbd List <integer>\n\xef\xbf\xbd List <Student>\n\n\xef\xbf\xbd Dictionary <keyType, valueType>\n\xef\xbf\xbd Dictionary<Student, string>\n\n\xef\xbf\xbd Note:\n\n\xef\xbf\xbd Set, Bag, Array, List and \n\nDictionary are called \n\ncollection types\n\n\xef\xbf\xbd Collection type cannot be \n\napplied repeatedly (nested)\n\n\xef\xbf\xbd E.g., it is illegal to write \nSet<Array<integer,10>>\n\n\n\n3\n\nExample\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\n};\n\n(\xe2\x80\x9cGone with the Wind\xe2\x80\x9d, 1939, 231, color) is a Movie object.\n\nExample (non-atomic type)\n\nclass Star {\n\nattribute string name;\n\nattribute Struct Address {\n\nstring street,\n\nArray<char, 10> city\n\n} homeAddress;\n\nattribute Address officeAddress;\n\n};\n\nExample\n\nclass Student {\n\nattribute string ID; \n\nattribute string lastName;\n\nattribute string firstName; \n\nattribute date dob;     /* date is a basic type in ODL */\n\nattribute string program;\n\nattribute Struct Address {\n\nstring street,\n\nstring city\n\n} homeAddress;\n\n};\n\nExample\n\nclass Course {\n\nattribute string courseNumber;\n\nattribute string courseName; \n\nattribute integer noOfCredits;\n\nattribute string department;\n\n};\n\nRelationships in ODL\n\n\xef\xbf\xbd If we are designing a database about Movies and \n\nStars, what are we missing? The relationships\xe2\x80\xa6.\n\n\xef\xbf\xbd How are Movies and Stars related?\n\n\xef\xbf\xbd Every movie has a star (or stars)\n\nExample\n\n\xef\xbf\xbd Can we write \xe2\x80\x9c attribute Star starOf; \xe2\x80\x9d ?\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\nattribute Star starOf;\n\n};\n\n\xef\xbf\xbd No, the attribute typesmust not be classes\n\n\n\n4\n\nExample\n\n\xef\xbf\xbd starOf is a relationship between Movie and Star\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\nrelationship Star starOf;\n\n};\n\nInverse Relationships\n\n\xef\xbf\xbd How are Movies and Stars related?\n\n\xef\xbf\xbd Not only every movie has a star but also every star \n\nhas a role in some movie(s)\n\n\xef\xbf\xbd To fix this in the Star class, we add the line:\n\nrelationship Movie starredIn;\n\nExample\n\nclass Star {\n\nattribute string name;\n\nattribute Struct Address {\n\nstring street,\n\nstring city\n\n} address;\n\nrelationship Movie starredIn;\n\n};\n\n\xef\xbf\xbd What is the problem here?\n\nInverse Relationships\n\n\xef\xbf\xbd We are omitting a very important aspect of the \n\nrelationship between movies and stars\n\n\xef\xbf\xbd We need a way to ensure that if a star S is \n\nconnected  to a movie M via stars, then \n\nconversely, M is connected to S via starredIn\n\n\xef\xbf\xbd In ODL that is done by  inverse of a relationship\n\nMovies Stars\n\nStarredIn\n\nStars\n\nExample\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\nrelationship Star stars \n\ninverse Star::starredIn;\n\n};\n\nExample\n\nclass Star {\n\nattribute string name;\n\nattribute Struct Address {\n\nstring street,\n\nstring city\n\n} address;\n\nrelationship Movie starredIn\n\ninverse Movie::stars;\n\n};\n\n\n\n5\n\nRelationships in ODL\n\n\xef\xbf\xbd Our design is missing another important point!\n\n\xef\xbf\xbd A movie typically has several stars\n\n\xef\xbf\xbd A star usually plays in more than one movie\n\n\xef\xbf\xbd To fix this, we write:\n\nrelationship Set<Star> stars;\n\nExample\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\nrelationship Set<Star> stars \n\ninverse Star::starredIn;\n\n};\n\nExample\n\nclass Star {\n\nattribute string name;\n\nattribute Struct Address {\n\nstring street,\n\nstring city\n\n} address;\n\nrelationship Set<Movie> starredIn\n\ninverse Movie::stars;\n\n};\n\nExample\n\n\xef\xbf\xbd Suppose we introduce another class, Studio, \n\nrepresenting the studios, i.e., companies that \n\nproduce movies\n\nclass Studio {\n\nattribute string name;\n\nattribute string address;\n\n};\n\nExample\n\n\xef\xbf\xbd How are Movies and Studios related?\n\n\xef\xbf\xbd Every Studio owns several Movies\n\nclass Studio {\n\nattribute string name;\n\nattribute string address;\n\nrelationship Set<Movie> owns \n\ninverse Movie::ownedBy;\n\n};\n\nExample\n\n\xef\xbf\xbd What about inverse?\n\n\xef\xbf\xbd Every Movie is owned by some Studio\n\nclass Movie {\n\nattribute string title;\n\nattribute integer year;\n\nattribute integer length;\n\nattribute enum Film {color, blackAndWhite} filmType;\n\nrelationship Set<Star> stars inverse Star::starredIn;\n\nrelationship Studio ownedBy inverse Studio::owns;\n\n};\n\n\n\n6\n\nMultiplicity of relationships\n\n\xef\xbf\xbd In general, when we have a pair of inverse  \n\nrelationships, there are four cases:\n\n\xef\xbf\xbd The relationship is unique in both directions (1)\n\n\xef\xbf\xbd The relationship is unique in just one direction (2)\n\n\xef\xbf\xbd The relationship is not unique in any direction (1)\n\n\xef\xbf\xbd The multiplicity is thus referred to the kinds of these 4 \n\nrelationships, also denoted as 1-1 (read as one-one),  \n\n1-M (one-many), M-1 (many-one), and  M-N \n\n(many-many).\n\nMultiplicity of relationships\n\n\xef\xbf\xbd A many-many relationship from a class C to a class D is \none in which, for each C there is a set of Ds associated \nwith C, and in the inverse relationship, associated with  \neach D is a set of Cs \n\xef\xbf\xbd For example, each student can take many courses and each \n\ncourse can be taken by more than one student\n\nclass Student {\n\n. . .\n\nrelationship Set<Course> takes inverse Course::takenBy;\n\n};\n\nclass Course {\n\n. . .\n\nrelationship Set<Student> takenBy inverse Student:: takes;\n\n};\n\nMultiplicity of relationships\n\n\xef\xbf\xbd A many-one relationship from class C to a class D, is one \nwhere for each C there is a at most one D, but no such a \nconstraint in the  reverse direction (similarly for one-many)\n\xef\xbf\xbd For example, many employees may work in the same \n\ndepartment, but each employee works only in one department\n\nclass Employee {\n\n. . .\n\nrelationship Department worksIn inverse Department::workers;\n\n};\n\nclass Department {\n\n. . .\n\nrelationship Set< Employee > workers inverse    \nEmployee::worksIn;\n\n};\n\nMultiplicity of relationships\n\n\xef\xbf\xbd A one-one relationship from class C to class D is one that  \nfor each C there is a at most one D, and conversely, for \neach D there is at most one C\n\xef\xbf\xbd For example, each department has at most one professor as its \n\nchairperson and each professor can be the chair of at most one \ndepartment\n\nclass Professor {\n\n. . .\n\nrelationship Department chairOf  inverse  Department::chair;\n\n};\n\nclass Department {\n\n. . .\n\nrelationship Professor chair inverse Professor:: chairOf;\n\n};\n\nInheritance in Object Oriented World\n\n\xef\xbf\xbd Objects can be organized into a hierarchical \n\ninheritance/is structure\n\n\xef\xbf\xbd A child class (or subclass) will inherit properties \n\nform a parent class (or all the superclasses) higher \n\nin the hierarchy.\n\nPerson\n\nProfessorStudent\n\nSubclasses in ODL\n\n\xef\xbf\xbd Often, a class contains some objects that have \n\nspecial properties not associated with all \n\nmembers of the class \n\n\xef\xbf\xbd If so, we find it useful to organize the class into \n\nsubclasses, each subclass having its own special\n\nattributes and/or relationships\n\n\n\n7\n\nSubclasses in ODL\n\n\xef\xbf\xbd We define a class C to be a subclass of another class D\nby following the name C in its declaration with a keyword \nextends and the name D\n\nclass Cartoon extends Movie {\n\nrelationship Set<Star> voices;\n\n};\n\nA subclass inherits all the properties of its superclasses\n\nSo, each cartoon object has title, year, length, filmType, and \ninherits relationships stars and ownedBy from Movie, in addition \nto its own relationship voices.\n\nExample\nclass Person {\n\nattribute string lastName;\n\nattribute string firstName; \n\nattribute integer age;\n\nattribute Struct Address {\n\nstring street,\n\nstring city\n\n} homeAddress;\n\n};\n\nclass Student extends Person {\n\nattribute string ID; \n\nattribute string program;\n\n};\n\nInheritance in ODL\n\n\xef\xbf\xbd A class may have more than one subclass.\n\n\xef\xbf\xbd A class may have more than one class from which it \n\ninherits  properties; those classes are its superclasses\n\n\xef\xbf\xbd Subclasses may themselves have subclasses, yielding a \n\nhierarchy of classes where each class inherits the \n\nproperties of its ancestors.\n\nMultiple Inheritance in ODL\n\nPerson\n\nProfessor StudentEmployee\n\nLab InstructorTA\n\nExample\n\nclass MurderMystery extends Movie {\n\nattribute string weapon;\n\n};\n\nclass CartoonMurderMystery extends Cartoon : MurderMystery;\n\n\xef\xbf\xbdThus, a CartoonMurderMystery object is defined to have all the \nproperties of both of its superclasses: Cartoon and MurderMystery.\n\nMovie\n\nMurderMysteryCartoon\n\nCartoonMurderMystery\n\n\n'