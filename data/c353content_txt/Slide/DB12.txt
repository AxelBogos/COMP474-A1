b'Microsoft PowerPoint - DB12.ppt [Compatibility Mode]1COMP353 DatabasesDatabase Design:Object Definition Language (ODL)ODL\xef\xbf\xbd ODL (Object Definition Language) is a standard text-based language for describing the structure of databases\xef\xbf\xbd ODL is an extension of IDL (Interface Description Language), a component of CORBA (Common Object Request Broker Architecture) Object Oriented World\xef\xbf\xbd In an object oriented design, the \xe2\x80\x9cworld\xe2\x80\x9d we want to model is thought of as being composed of objects\xef\xbf\xbd Everything is an object\xef\xbf\xbd people\xef\xbf\xbd bank accounts\xef\xbf\xbd airline flights\xef\xbf\xbd Every object has a unique object id (OID)\xef\xbf\xbd Every object is an instance of a class\xef\xbf\xbd A class simply represents a grouping of similar objects\xef\xbf\xbd All objects that are instances of the same class have the same properties and behaviorsClass Declarations\xef\xbf\xbd A declaration of a class in ODL consists of:\xef\xbf\xbd The keyword class\xef\xbf\xbd The name of the class\xef\xbf\xbd A bracketed { \xe2\x80\xa6} list of properties of the classclass <name> {<list of properties>};class Movie {\xe2\x80\xa6};Properties of ODL classes\xef\xbf\xbd ODL classes can have three kinds of properties:\xef\xbf\xbd Attributes\xe2\x80\xa2 properties whose types are built from primitive/basic typessuch as integers, strings,\xe2\x80\xa6\xef\xbf\xbd Relationships\xe2\x80\xa2 properties whose type is either a reference to an objector a collection of such references\xef\xbf\xbd Methods\xe2\x80\xa2 functions that may be applied to objects of the class Attributes in ODL\xef\xbf\xbd Attributes are the simplest kinds of properties\xef\xbf\xbd An attribute describes some aspect of an objectby associating, with the object, a value of some simple type\xef\xbf\xbd For example, attributes of a Student object\xef\xbf\xbd Student ID\xef\xbf\xbd Name\xef\xbf\xbd Address\xef\xbf\xbd E-mail2Keys in ODL\xef\xbf\xbd In ODL, we declare keys using the keyword key\xef\xbf\xbd If a key has more than one attribute, we surround them by (\xe2\x80\xa6)\xe2\x80\xa2 Example: (two attributes forming a key)class Movie(extent Movies key (title, year) ) {attribute string title; \xe2\x80\xa6 }; \xef\xbf\xbd If a class has > one key, we may list them all, separated by commas \xe2\x80\xa2 Example: (A class with two keys)class Employee (extent Employees key empID, SIN) {\xe2\x80\xa6};Single-Value Constraints in ODL\xef\xbf\xbd Often, we should enforce properties in the database saying that there is at most one value playing a particular role \xef\xbf\xbd For example:\xe2\x80\xa2 that a movie object has a unique title, year, length,  etc \xe2\x80\xa2 that a movie is owned by a unique studioSingle-Value Constraints\xef\xbf\xbd In ODL:\xef\xbf\xbd An attribute is not of a collection type (Set, Bag, Array, List, Dictionary are collection types.)\xef\xbf\xbd A relationship is either a class type or (a single use of) a collection type constructor applied to a class type. \xef\xbf\xbd Recall that in the E/R notation:\xef\xbf\xbd attributes are atomic\xef\xbf\xbd an arrow (\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92) can be used to express the multiplicity of relationships (1:1), (1:M), and (N:M) Type systemA type system consists of\xef\xbf\xbd Basic types\xef\xbf\xbd Type constructors\xe2\x80\xa2 recursive rules whereby complex types are built from simpler onesBasis of types in ODL\xef\xbf\xbd Primitive types (atomic)\xef\xbf\xbd Integer\xef\xbf\xbd Float\xef\xbf\xbd Char\xef\xbf\xbd Character String\xef\xbf\xbd Boolean\xef\xbf\xbd Date\xef\xbf\xbd Enumeration (a list of names declared to be synonyms for integers\xef\xbf\xbd Class types\xef\xbf\xbd MovieType constructors in ODL\xef\xbf\xbd Set\xef\xbf\xbd Set <integer>\xef\xbf\xbd Set <Movie>\xef\xbf\xbd Bag\xef\xbf\xbd Bag <integer>\xef\xbf\xbd Bag <Movie>\xef\xbf\xbd Array\xef\xbf\xbd Array <integer, 10>\xef\xbf\xbd Array <Movie, 3>\xef\xbf\xbd Structure\xef\xbf\xbd Struct Address {string street, string city} \xef\xbf\xbd List\xef\xbf\xbd List <integer>\xef\xbf\xbd List <Student>\xef\xbf\xbd Dictionary <keyType, valueType>\xef\xbf\xbd Dictionary<Student, string>\xef\xbf\xbd Note:\xef\xbf\xbd Set, Bag, Array, List and Dictionary are called collection types\xef\xbf\xbd Collection type cannot be applied repeatedly (nested)\xef\xbf\xbd E.g., it is illegal to write Set<Array<integer,10>>3Exampleclass Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;};(\xe2\x80\x9cGone with the Wind\xe2\x80\x9d, 1939, 231, color) is a Movie object.Example (non-atomic type)class Star {attribute string name;attribute Struct Address {string street,Array<char, 10> city} homeAddress;attribute Address officeAddress;};Exampleclass Student {attribute string ID; attribute string lastName;attribute string firstName; attribute date dob;     /* date is a basic type in ODL */attribute string program;attribute Struct Address {string street,string city} homeAddress;};Exampleclass Course {attribute string courseNumber;attribute string courseName; attribute integer noOfCredits;attribute string department;};Relationships in ODL\xef\xbf\xbd If we are designing a database about Movies and Stars, what are we missing? The relationships\xe2\x80\xa6.\xef\xbf\xbd How are Movies and Stars related?\xef\xbf\xbd Every movie has a star (or stars)Example\xef\xbf\xbd Can we write \xe2\x80\x9c attribute Star starOf; \xe2\x80\x9d ?class Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;attribute Star starOf;};\xef\xbf\xbd No, the attribute typesmust not be classes4Example\xef\xbf\xbd starOf is a relationship between Movie and Starclass Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;relationship Star starOf;};Inverse Relationships\xef\xbf\xbd How are Movies and Stars related?\xef\xbf\xbd Not only every movie has a star but also every star has a role in some movie(s)\xef\xbf\xbd To fix this in the Star class, we add the line:relationship Movie starredIn;Exampleclass Star {attribute string name;attribute Struct Address {string street,string city} address;relationship Movie starredIn;};\xef\xbf\xbd What is the problem here?Inverse Relationships\xef\xbf\xbd We are omitting a very important aspect of the relationship between movies and stars\xef\xbf\xbd We need a way to ensure that if a star S is connected  to a movie M via stars, then conversely, M is connected to S via starredIn\xef\xbf\xbd In ODL that is done by  inverse of a relationshipMovies StarsStarredInStarsExampleclass Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;relationship Star stars inverse Star::starredIn;};Exampleclass Star {attribute string name;attribute Struct Address {string street,string city} address;relationship Movie starredIninverse Movie::stars;};5Relationships in ODL\xef\xbf\xbd Our design is missing another important point!\xef\xbf\xbd A movie typically has several stars\xef\xbf\xbd A star usually plays in more than one movie\xef\xbf\xbd To fix this, we write:relationship Set<Star> stars;Exampleclass Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;relationship Set<Star> stars inverse Star::starredIn;};Exampleclass Star {attribute string name;attribute Struct Address {string street,string city} address;relationship Set<Movie> starredIninverse Movie::stars;};Example\xef\xbf\xbd Suppose we introduce another class, Studio, representing the studios, i.e., companies that produce moviesclass Studio {attribute string name;attribute string address;};Example\xef\xbf\xbd How are Movies and Studios related?\xef\xbf\xbd Every Studio owns several Moviesclass Studio {attribute string name;attribute string address;relationship Set<Movie> owns inverse Movie::ownedBy;};Example\xef\xbf\xbd What about inverse?\xef\xbf\xbd Every Movie is owned by some Studioclass Movie {attribute string title;attribute integer year;attribute integer length;attribute enum Film {color, blackAndWhite} filmType;relationship Set<Star> stars inverse Star::starredIn;relationship Studio ownedBy inverse Studio::owns;};6Multiplicity of relationships\xef\xbf\xbd In general, when we have a pair of inverse  relationships, there are four cases:\xef\xbf\xbd The relationship is unique in both directions (1)\xef\xbf\xbd The relationship is unique in just one direction (2)\xef\xbf\xbd The relationship is not unique in any direction (1)\xef\xbf\xbd The multiplicity is thus referred to the kinds of these 4 relationships, also denoted as 1-1 (read as one-one),  1-M (one-many), M-1 (many-one), and  M-N (many-many).Multiplicity of relationships\xef\xbf\xbd A many-many relationship from a class C to a class D is one in which, for each C there is a set of Ds associated with C, and in the inverse relationship, associated with  each D is a set of Cs \xef\xbf\xbd For example, each student can take many courses and each course can be taken by more than one studentclass Student {. . .relationship Set<Course> takes inverse Course::takenBy;};class Course {. . .relationship Set<Student> takenBy inverse Student:: takes;};Multiplicity of relationships\xef\xbf\xbd A many-one relationship from class C to a class D, is one where for each C there is a at most one D, but no such a constraint in the  reverse direction (similarly for one-many)\xef\xbf\xbd For example, many employees may work in the same department, but each employee works only in one departmentclass Employee {. . .relationship Department worksIn inverse Department::workers;};class Department {. . .relationship Set< Employee > workers inverse    Employee::worksIn;};Multiplicity of relationships\xef\xbf\xbd A one-one relationship from class C to class D is one that  for each C there is a at most one D, and conversely, for each D there is at most one C\xef\xbf\xbd For example, each department has at most one professor as its chairperson and each professor can be the chair of at most one departmentclass Professor {. . .relationship Department chairOf  inverse  Department::chair;};class Department {. . .relationship Professor chair inverse Professor:: chairOf;};Inheritance in Object Oriented World\xef\xbf\xbd Objects can be organized into a hierarchical inheritance/is structure\xef\xbf\xbd A child class (or subclass) will inherit properties form a parent class (or all the superclasses) higher in the hierarchy.PersonProfessorStudentSubclasses in ODL\xef\xbf\xbd Often, a class contains some objects that have special properties not associated with all members of the class \xef\xbf\xbd If so, we find it useful to organize the class into subclasses, each subclass having its own specialattributes and/or relationships7Subclasses in ODL\xef\xbf\xbd We define a class C to be a subclass of another class Dby following the name C in its declaration with a keyword extends and the name Dclass Cartoon extends Movie {relationship Set<Star> voices;};A subclass inherits all the properties of its superclassesSo, each cartoon object has title, year, length, filmType, and inherits relationships stars and ownedBy from Movie, in addition to its own relationship voices.Exampleclass Person {attribute string lastName;attribute string firstName; attribute integer age;attribute Struct Address {string street,string city} homeAddress;};class Student extends Person {attribute string ID; attribute string program;};Inheritance in ODL\xef\xbf\xbd A class may have more than one subclass.\xef\xbf\xbd A class may have more than one class from which it inherits  properties; those classes are its superclasses\xef\xbf\xbd Subclasses may themselves have subclasses, yielding a hierarchy of classes where each class inherits the properties of its ancestors.Multiple Inheritance in ODLPersonProfessor StudentEmployeeLab InstructorTAExampleclass MurderMystery extends Movie {attribute string weapon;};class CartoonMurderMystery extends Cartoon : MurderMystery;\xef\xbf\xbdThus, a CartoonMurderMystery object is defined to have all the properties of both of its superclasses: Cartoon and MurderMystery.MovieMurderMysteryCartoonCartoonMurderMystery'