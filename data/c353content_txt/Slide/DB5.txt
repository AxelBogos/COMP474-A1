b'Microsoft PowerPoint - DB5.ppt [Compatibility Mode]3/18/20191COMP353 DatabasesSchema Refinement:Minimal Bases(Canonical Covers)1Minimal Basis (Canonical Cover)\xef\xbf\xbd Recall that the number of iterations to compute the closure of a set of attributes depends on the number of attributes\xef\xbf\xbd The complexity of some other algorithms which we will study (eg, decomposition algorithms) depend on the number of FD\xe2\x80\x99s\xef\xbf\xbd To ease the situation, can we \xe2\x80\x9cminimize\xe2\x80\x9d F?2Covers/bases\xef\xbf\xbd Note that FD\xe2\x80\x99s on a relation may be represented in different but equivalent ways. \xef\xbf\xbd Recall that, given two sets of FD\xe2\x80\x99s F and G on R, we say that:\xe2\x80\x9cG follows from F (F\xe2\x8a\xa8 G)\xe2\x80\x9d, provided for every instance r of R,if r satisfies F, then r satisfies G.  In this case, we may also say: \xe2\x80\x9cF implies G\xe2\x80\x9c, or \xe2\x80\x9cF covers G\xe2\x80\x9d, or \xe2\x80\x9cG is implied by F\xe2\x80\x9d.\xef\xbf\xbd If F \xe2\x8a\xa8 G and  G \xe2\x8a\xa8 F both hold, then we say that G and F are equivalent and denote this by F \xe2\x89\xa1 G. In this case, we may also say that F and G are covers for each other.\xef\xbf\xbd Note that F \xe2\x89\xa1 G iff F+ \xe2\x89\xa1 G+3Canonical Cover (minimal basis)\xef\xbf\xbd Let F be a set of FD\xe2\x80\x99s.  A canonical cover of F is a set G of FD\xe2\x80\x99s that satisfies the following conditions:1. G is equivalent to F, that is, G \xe2\x89\xa1 F2. Every FD in G is has a single attribute on the right hand side.3. G is minimal, that is, if we obtain a set H of FD\xe2\x80\x99s from G by deleting some FD\xe2\x80\x99s in G or by reducing the left hand side of some FD\xe2\x80\x99s, then H won\xe2\x80\x99t be equivalent to F  (that is, H \xe2\x89\xa2\xe2\x89\xa2\xe2\x89\xa2\xe2\x89\xa2 F)4Canonical Cover\xef\xbf\xbd A canonical cover G is minimal in two respects:1. Every FD in G is \xe2\x80\x9crequired\xe2\x80\x9d in order for G to be equivalent to F2. Every FD in G is as \xe2\x80\x9csmall\xe2\x80\x9d as possible, that is, \xe2\x80\xa2 each attribute on the left hand side X is necessary. \xe2\x80\xa2 Recall: the RHS of every FD in G is a single attribute5Computing Canonical CoverGiven a set F of FD\xe2\x80\x99s, how to compute a canonical cover G of F?\xef\xbf\xbd Step 1: Put the FD\xe2\x80\x99s in the simple form (i.e., one attribute on the RHS)\xef\xbf\xbd Initialize G := F\xef\xbf\xbd Replace each FD X \xe2\x86\x92 A1A2\xe2\x80\xa6Ak in G with X\xe2\x86\x92A1,  X\xe2\x86\x92A2, \xe2\x80\xa6,  X\xe2\x86\x92Ak\xef\xbf\xbd Step 2: Minimize the left hand side X of every FD\xef\xbf\xbd E.g., if AB\xe2\x86\x92C is in G, check if A or B on the LHS is redundant , i.e.,(G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {AB\xe2\x86\x92 C } \xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83 {A \xe2\x86\x92 C })+ \xe2\x89\xa1 F+ or (G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {AB \xe2\x86\x92 C } \xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83 {B \xe2\x86\x92 C })+ \xe2\x89\xa1 F+ ? \xef\xbf\xbd Step 3: Delete redundant FD\xe2\x80\x99s, if any\xef\xbf\xbd For each FD X \xe2\x86\x92 A in G, check if (G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {X \xe2\x86\x92 A })+ \xe2\x89\xa1 F+? 63/18/20192Computing Canonical Cover \xef\xbf\xbd R = { A, B, C, D, E, H}\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Step 1 \xe2\x80\x93 put FD\xe2\x80\x99s in the simple form\xef\xbf\xbd All present FD\xe2\x80\x99s are simple \xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd G = {A\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92B, DE\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B}7Computing Canonical Cover \xef\xbf\xbd Step 2 \xe2\x80\x93 Check every FD to see if it is left reduced\xef\xbf\xbd For every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in G, check if the closure of a subset of Xdetermines A. If so, remove the redundant attribute(s) from X\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }8Computing Canonical Cover \xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B \xef\xbf\xbd obviously OK (no left redundancy)\xef\xbf\xbd DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A\xef\xbf\xbd D+ = D\xef\xbf\xbd E+ = E\xef\xbf\xbd OK (no left redundancy)\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }9Computing Canonical Cover \xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E\xef\xbf\xbd B+ = B\xef\xbf\xbd C+ = C\xef\xbf\xbd OK (no left redundancy)\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }10Computing Canonical Cover \xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E\xef\xbf\xbd A+ = AB\xef\xbf\xbd C+ = C\xef\xbf\xbd OK (no left redundancy)\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }11Computing Canonical Cover \xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A\xef\xbf\xbd B+ = B\xef\xbf\xbd C+ = C\xef\xbf\xbd D+ = D\xef\xbf\xbd {BC}+ = BCE\xef\xbf\xbd {CD}+ = CD\xef\xbf\xbd {BD}+ = BD\xef\xbf\xbdOK (no left redundancy)\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }123/18/20193Computing Canonical Cover \xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B\xef\xbf\xbd A+ = AB\xef\xbf\xbd E & D are redundant  \xef\xbf\xbd we can remove them        from AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B\xef\xbf\xbdG = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }13Computing Canonical Cover \xef\xbf\xbd Step 3 \xe2\x80\x93 Find and remove redundant FDs\xef\xbf\xbd For every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in G\xef\xbf\xbd Remove X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G; call the result G\xe2\x80\x99\xef\xbf\xbd Compute X+ under G\xe2\x80\x99\xef\xbf\xbd If A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X+, then X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is redundant and hence we remove the FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G (that is, we rename G\xe2\x80\x99 to G)\xef\xbf\xbd R = { A, B, C, D, E, H}\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }14Computing Canonical Cover \xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Remove DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G\xef\xbf\xbd G\xe2\x80\x99 = { BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Compute DE+ under G\xe2\x80\x99\xef\xbf\xbd {DE}+ = DE (computed under G\xe2\x80\x99)\xef\xbf\xbd Since A \xe2\x88\x89\xe2\x88\x89\xe2\x88\x89\xe2\x88\x89 DE, the FD DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is  not redundant\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }15Computing Canonical Cover \xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Remove BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E from G\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Compute BC+ under G\xe2\x80\x99\xef\xbf\xbd {BC}+ = BC\xef\xbf\xbd BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E is  not redundant\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }16Computing Canonical Cover \xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Remove AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E from G\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Compute {AC}+ under G\xe2\x80\x99\xef\xbf\xbd {AC}+ = ACBESince E\xe2\x88\x8a\xe2\x88\x8a\xe2\x88\x8a\xe2\x88\x8a ACBE, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E is redundant \xef\xbf\xbd remove it from G\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }17Computing Canonical Cover \xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Remove BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Compute BCD+ under G\xe2\x80\x99\xef\xbf\xbd {BCD}+ = BCDEA\xef\xbf\xbd This FD is redundant \xef\xbf\xbd remove it from G\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd R = { A, B, C, D, E, H }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }183/18/20194Computing Canonical Cover \xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\xef\xbf\xbd Remove A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B from G\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E }\xef\xbf\xbd Compute A+ under G\xe2\x80\x99\xef\xbf\xbd A+ = A\xef\xbf\xbd This FD is not redundant (Another reason why need A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B ?)\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B } \xef\xbf\xbd G is a  minimal cover for F\xef\xbf\xbd R = { A, B, C, D, E, F }\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }19Several Canonical Covers Possible?\xef\xbf\xbd Relation R={A,B,C} with F = {A \xe2\x86\x92 B, A \xe2\x86\x92 C, B \xe2\x86\x92 A, B \xe2\x86\x92 C, C \xe2\x86\x92 B, C \xe2\x86\x92 A}\xef\xbf\xbd Several canonical covers exist\xef\xbf\xbd G = {A \xe2\x86\x92 B, B \xe2\x86\x92 A, B \xe2\x86\x92 C, C \xe2\x86\x92 B}\xef\xbf\xbd G = {A \xe2\x86\x92 B, B \xe2\x86\x92 C, C \xe2\x86\x92 A}A BCA BCA BCCan you find more ?20Computing a Canonical CoverThis example shows the order of steps 2 and 3 is important!R= {A,B,C,D} with F = { ABC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C } 1. (step 3; step 2): Doing step 3 first, no FD is redundant  (Why?)In step 2, ABC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D is left reduced to AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D. No more changes.We thus obtain G = { AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C } which is equivalent to F but is not minimal! (The red FD is redundant!).2. (step 2; step 3): Following our algorithm, in step 2 we get G above. In step 3, we remove the redundant FD in G. This yields { AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C} which is equivalent to F and minimal.21How to Deal with Redundancy?Name Address RepresentingFirm SpokesPersonCarrie Fisher 123 Maple Star One Joe SmithHarrison Ford 789 Palm dr. Star One Joe SmithMark Hamill 456 Oak rd. Movies & Co Mary Johns Relation Instance:Relation Schema:Star (name, address, representingFirm, spokesPerson)\xef\xbf\xbd We can decompose this relation into two smaller relationsF = { name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address, representingFirm, spokePerson,representingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }22How to Deal with Redundancy?Given the relation schema below:Star (name, address, representingFirm, spokesperson) withDecompose Star into the following 2 relations:Star (name, address, representingFirm)with F1={ name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address,representingFirm }andFirm (representingFirm, spokesPerson)with F2= { representingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }F = {name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address, representingFirm, spokePersonrepresentingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }23How to Deal with Redundancy?Name Address RepresentingFirm Spokesperson Carrie Fisher 123 Maple Star One Joe SmithHarrison Ford 789 Palm dr. Star One Joe SmithMark Hamill 456 Oak rd. Movies & Co Mary Johns Instance of Star before decomposition:Name Address RepresentingFirmCarrie Fisher 123 Maple Star OneHarrison Ford 789 Palm dr. Star OneMark Hamill 456 Oak rd. Movies & CoThe instance after the decomposition:RepresentingFirm Spokesperson Star One Joe SmithMovies & Co Mary Johns 243/18/20195Decomposition\xef\xbf\xbd A decomposition of a relation schema R is obtained by splitting Rinto two or more relations, denoted as R = {R1,\xe2\x80\xa6,Rm}. Formally, R is a decomposition of R if the following two conditions hold:1. No attribute of R is lost or introduced (i.e., R1\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x80\xa6\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaaRm= R)2. No schema Ri is a subset or equal to any relation Rj (for i \xe2\x89\xa0 j)\xef\xbf\xbd When m = 2, the decomposition R = { R1, R2 } is called binary\xef\xbf\xbd Not every decomposition of R is \xe2\x80\x9cdesirable\xe2\x80\x9d. Why?\xef\xbf\xbd Properties of a decomposition?(1) Lossless-join \xe2\x80\x93 this is a must(2) Dependency-preserving \xe2\x80\x93 this is desirableExplanation follows \xe2\x80\xa625ExampleRelation Instance: Decomposed into:B C2 32 5A B C1 2 34 2 5A B1 24 2To \xe2\x80\x9crecover\xe2\x80\x9d information, we join the relations:A B C1 2 34 2 54 2 31 2 5Why do we got new tuples?26Lossless-Join Decomposition\xef\xbf\xbd Suppose R is a relation and F is a set of FD\xe2\x80\x99s over R. A binary decomposition of R into relation schemas R1 and R2 with attribute sets X and Y is said to be a lossless-join decomposition with respect to F, if for every instance r of R that satisfies F, it holds that \xcf\x80\xcf\x80\xcf\x80\xcf\x80X( r )\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd \xcf\x80\xcf\x80\xcf\x80\xcf\x80Y( r ) = r\xef\xbf\xbd Thm: Let R be a relation schema and F a set of FD\xe2\x80\x99s on R. A binary decomposition of R into R1 and R2 with attribute sets X and Y is lossless if X \xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9 Y \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 X or X \xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9 Y \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 Y, i.e., this binary decomposition is lossless if the common attributes of X and Y form a key of  R1 or R227Example: Lossless-joinRelation Instance: Decomposed into:B C2 3A B C1 2 34 2 3A B1 24 2To recover the original relation r, we join the two relations:A B C1 2 34 2 3F = { B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C }No new tuples !28Example: Dependency PreservationRelation Instance:Decomposed into:B C D2 5 73 6 8A B1 24 3F = { B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D }A B C D1 2 5 74 3 6 8Can we enforce A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D?How ?29Dependency-Preserving Decomposition\xef\xbf\xbd A dependency-preserving decomposition allows us to enforce every  FD (on each insertion of a tuple or when modifying a tuple) by examining just one single relation instance\xef\xbf\xbd Let R be a relation schema that is decomposed into two schemas with attribute sets X and Y, and let F be a set of FD\xe2\x80\x99s over R. The projection of F on X (denoted by FX) is the set of FD\xe2\x80\x99s in  F+ that follow from F and involve only attributes in X\xef\xbf\xbd Recall that a FD U \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 V in F+ is in FX if all the attributes in Uand V are in X; In this case, we say this FD is \xe2\x80\x9crelevant\xe2\x80\x9d to X\xef\xbf\xbd The decomposition of < R, F > into two schemas with attribute sets X and Y is dependency-preserving if ( FX \xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa FY )+ \xe2\x89\xa1 F+303/18/20196Normal Forms\xef\xbf\xbd Given a relation schema R, we must be able to determine whether it is \xe2\x80\x9cgood\xe2\x80\x9d or we need to decompose it into smaller relations, and if so, how?\xef\xbf\xbd To address these issues, we need to study normal forms\xef\xbf\xbd If a relation schema is in one of these normal forms, we know that it is in some \xe2\x80\x9cgood\xe2\x80\x9d shape in the sense that certain kinds of problems (related to redundancy) cannot arise311NF2NF3NFBCNFNormal Forms\xef\xbf\xbd The normal forms based on FD\xe2\x80\x99s are\xef\xbf\xbd First normal form (1NF)\xef\xbf\xbd Second normal form (2NF)\xef\xbf\xbd Third normal form (3NF)\xef\xbf\xbd Boyce-Codd normal form (BCNF)\xef\xbf\xbd These normal forms have increasingly restrictive requirements32Third Normal Form (3NF)Let R be a relation schema, F a set of FD\xe2\x80\x99s on R, X\xe2\x8a\x86 R, and  A \xe2\x88\x88 R. \xef\xbf\xbd We say R w.r.t. F is in 3NF (third normal form), if for every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in F, at least one of the following conditions holds:\xef\xbf\xbd A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X, that is, X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is a trivial FD, or\xef\xbf\xbd X is a superkey, or\xef\xbf\xbd If X is not a key, then A is part of some key of R\xef\xbf\xbd To determine if a relation <R, F> is in 3NF:\xef\xbf\xbd We check whether the LHS of each nontrivial FD in F is a superkey\xef\xbf\xbd If not, we check whether its RHS is part of any key of R33Boyce-Codd Normal FormLet R be a relation schema, F a set of FD\xe2\x80\x99s on R, X \xe2\x8a\x86 R, and  A \xe2\x88\x88 R.\xef\xbf\xbd We say R w.r.t. F is in Boyce-Codd normal form, if for every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in F, at least one of the following conditions holds:\xef\xbf\xbd A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X, that is, X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is a trivial FD, or\xef\xbf\xbd X is a superkey\xef\xbf\xbd To determine whether R with a given set of FD\xe2\x80\x99s F is in BCNF \xef\xbf\xbd Check whether the LHS X of each nontrivial FD in F is a superkey\xe2\x80\xa2 How? Simply compute X+ (w.r.t. F) and check if X+ = R34'