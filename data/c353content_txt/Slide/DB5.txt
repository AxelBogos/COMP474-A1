b'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMicrosoft PowerPoint - DB5.ppt [Compatibility Mode]\n\n\n3/18/2019\n\n1\n\nCOMP353 Databases\n\nSchema Refinement:\n\nMinimal Bases\n\n(Canonical Covers)\n\n1\n\nMinimal Basis (Canonical Cover)\n\n\xef\xbf\xbd Recall that the number of iterations to compute the closure \n\nof a set of attributes depends on the number of attributes\n\n\xef\xbf\xbd The complexity of some other algorithms which we will study \n\n(eg, decomposition algorithms) depend on the number of FD\xe2\x80\x99s\n\n\xef\xbf\xbd To ease the situation, can we \xe2\x80\x9cminimize\xe2\x80\x9d F?\n\n2\n\nCovers/bases\n\xef\xbf\xbd Note that FD\xe2\x80\x99s on a relation may be represented in different but \n\nequivalent ways. \n\n\xef\xbf\xbd Recall that, given two sets of FD\xe2\x80\x99s F and G on R, we say that:\n\n\xe2\x80\x9cG follows from F (F\xe2\x8a\xa8 G)\xe2\x80\x9d, provided for every instance r of R,\n\nif r satisfies F, then r satisfies G.  In this case, we may also say: \n\n\xe2\x80\x9cF implies G\xe2\x80\x9c, or \xe2\x80\x9cF covers G\xe2\x80\x9d, or \xe2\x80\x9cG is implied by F\xe2\x80\x9d.\n\n\xef\xbf\xbd If F \xe2\x8a\xa8 G and  G \xe2\x8a\xa8 F both hold, then we say that G and F are \n\nequivalent and denote this by F \xe2\x89\xa1 G. In this case, we may also say \n\nthat F and G are covers for each other.\n\n\xef\xbf\xbd Note that F \xe2\x89\xa1 G iff F+ \xe2\x89\xa1 G+\n\n3\n\nCanonical Cover (minimal basis)\n\n\xef\xbf\xbd Let F be a set of FD\xe2\x80\x99s.  A canonical cover of F is a set G of \n\nFD\xe2\x80\x99s that satisfies the following conditions:\n\n1. G is equivalent to F, that is, G \xe2\x89\xa1 F\n\n2. Every FD in G is has a single attribute on the right hand side.\n\n3. G is minimal, that is, if we obtain a set H of FD\xe2\x80\x99s from G by \n\ndeleting some FD\xe2\x80\x99s in G or by reducing the left hand side of \n\nsome FD\xe2\x80\x99s, then H won\xe2\x80\x99t be equivalent to F  (that is, H \xe2\x89\xa2\xe2\x89\xa2\xe2\x89\xa2\xe2\x89\xa2 F)\n\n4\n\nCanonical Cover\n\n\xef\xbf\xbd A canonical cover G is minimal in two respects:\n\n1. Every FD in G is \xe2\x80\x9crequired\xe2\x80\x9d in order for G to be equivalent to F\n\n2. Every FD in G is as \xe2\x80\x9csmall\xe2\x80\x9d as possible, that is, \n\n\xe2\x80\xa2 each attribute on the left hand side X is necessary. \n\n\xe2\x80\xa2 Recall: the RHS of every FD in G is a single attribute\n\n5\n\nComputing Canonical Cover\n\nGiven a set F of FD\xe2\x80\x99s, how to compute a canonical cover G of F?\n\n\xef\xbf\xbd Step 1: Put the FD\xe2\x80\x99s in the simple form (i.e., one attribute on the RHS)\n\n\xef\xbf\xbd Initialize G := F\n\n\xef\xbf\xbd Replace each FD X \xe2\x86\x92 A1A2\xe2\x80\xa6Ak in G with X\xe2\x86\x92A1,  X\xe2\x86\x92A2, \xe2\x80\xa6,  X\xe2\x86\x92Ak\n\xef\xbf\xbd Step 2: Minimize the left hand side X of every FD\n\n\xef\xbf\xbd E.g., if AB\xe2\x86\x92C is in G, check if A or B on the LHS is redundant , i.e.,\n\n(G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {AB\xe2\x86\x92 C } \xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83 {A \xe2\x86\x92 C })+ \xe2\x89\xa1 F+ or \n\n(G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {AB \xe2\x86\x92 C } \xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83\xe2\x8b\x83 {B \xe2\x86\x92 C })+ \xe2\x89\xa1 F+ ? \n\n\xef\xbf\xbd Step 3: Delete redundant FD\xe2\x80\x99s, if any\n\n\xef\xbf\xbd For each FD X \xe2\x86\x92 A in G, check if (G \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 {X \xe2\x86\x92 A })+ \xe2\x89\xa1 F+? 6\n\n\n\n3/18/2019\n\n2\n\nComputing Canonical Cover \n\n\xef\xbf\xbd R = { A, B, C, D, E, H}\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Step 1 \xe2\x80\x93 put FD\xe2\x80\x99s in the simple form\n\n\xef\xbf\xbd All present FD\xe2\x80\x99s are simple \n\n\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd G = {A\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92B, DE\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B}\n\n7\n\nComputing Canonical Cover \n\n\xef\xbf\xbd Step 2 \xe2\x80\x93 Check every FD to see if it is left reduced\n\n\xef\xbf\xbd For every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in G, check if the closure of a subset of X\n\ndetermines A. If so, remove the redundant attribute(s) from X\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n8\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B \n\n\xef\xbf\xbd obviously OK (no left redundancy)\n\n\xef\xbf\xbd DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A\n\n\xef\xbf\xbd D+ = D\n\n\xef\xbf\xbd E+ = E\n\n\xef\xbf\xbd OK (no left redundancy)\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n9\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E\n\n\xef\xbf\xbd B+ = B\n\n\xef\xbf\xbd C+ = C\n\n\xef\xbf\xbd OK (no left redundancy)\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n10\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E\n\n\xef\xbf\xbd A+ = AB\n\n\xef\xbf\xbd C+ = C\n\n\xef\xbf\xbd OK (no left redundancy)\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n11\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A\n\n\xef\xbf\xbd B+ = B\n\n\xef\xbf\xbd C+ = C\n\n\xef\xbf\xbd D+ = D\n\n\xef\xbf\xbd {BC}+ = BCE\n\n\xef\xbf\xbd {CD}+ = CD\n\n\xef\xbf\xbd {BD}+ = BD\n\n\xef\xbf\xbdOK (no left redundancy)\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n12\n\n\n\n3/18/2019\n\n3\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B\n\n\xef\xbf\xbd A+ = AB\n\xef\xbf\xbd E & D are redundant  \n\xef\xbf\xbd we can remove them        \nfrom AED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B\n\n\xef\xbf\xbdG = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n13\n\nComputing Canonical Cover \n\n\xef\xbf\xbd Step 3 \xe2\x80\x93 Find and remove redundant FDs\n\n\xef\xbf\xbd For every FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in G\n\n\xef\xbf\xbd Remove X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G; call the result G\xe2\x80\x99\n\n\xef\xbf\xbd Compute X+ under G\xe2\x80\x99\n\n\xef\xbf\xbd If A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X+, then X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is redundant and hence we remove \n\nthe FD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G (that is, we rename G\xe2\x80\x99 to G)\n\n\xef\xbf\xbd R = { A, B, C, D, E, H}\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n14\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Remove DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G\n\n\xef\xbf\xbd G\xe2\x80\x99 = { BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Compute DE+ under G\xe2\x80\x99\n\n\xef\xbf\xbd {DE}+ = DE (computed under G\xe2\x80\x99)\n\n\xef\xbf\xbd Since A \xe2\x88\x89\xe2\x88\x89\xe2\x88\x89\xe2\x88\x89 DE, the FD DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is  not redundant\n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n15\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Remove BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E from G\n\n\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Compute BC+ under G\xe2\x80\x99\n\n\xef\xbf\xbd {BC}+ = BC\n\n\xef\xbf\xbd BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E is  not redundant\n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n16\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Remove AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E from G\n\n\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Compute {AC}+ under G\xe2\x80\x99\n\n\xef\xbf\xbd {AC}+ = ACBE\n\nSince E\xe2\x88\x8a\xe2\x88\x8a\xe2\x88\x8a\xe2\x88\x8a ACBE, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E is redundant \xef\xbf\xbd remove it from G\n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n17\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A,  A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Remove BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A from G\n\n\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Compute BCD+ under G\xe2\x80\x99\n\n\xef\xbf\xbd {BCD}+ = BCDEA\n\n\xef\xbf\xbd This FD is redundant \xef\xbf\xbd remove it from G\n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd R = { A, B, C, D, E, H }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n18\n\n\n\n3/18/2019\n\n4\n\nComputing Canonical Cover \n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n\xef\xbf\xbd Remove A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B from G\n\n\xef\xbf\xbd G\xe2\x80\x99 = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E }\n\n\xef\xbf\xbd Compute A+ under G\xe2\x80\x99\n\n\xef\xbf\xbd A+ = A\n\n\xef\xbf\xbd This FD is not redundant (Another reason why need A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B ?)\n\n\xef\xbf\xbd G = { DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B } \n\n\xef\xbf\xbd G is a  minimal cover for F\n\n\xef\xbf\xbd R = { A, B, C, D, E, F }\n\n\xef\xbf\xbd F = { A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B, DE \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, BC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, AC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 E, BCD \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A, \n\nAED \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 B }\n\n19\n\nSeveral Canonical Covers Possible?\n\n\xef\xbf\xbd Relation R={A,B,C} with F = {A \xe2\x86\x92 B, A \xe2\x86\x92 C, \n\nB \xe2\x86\x92 A, B \xe2\x86\x92 C, C \xe2\x86\x92 B, C \xe2\x86\x92 A}\n\n\xef\xbf\xbd Several canonical covers exist\n\n\xef\xbf\xbd G = {A \xe2\x86\x92 B, B \xe2\x86\x92 A, B \xe2\x86\x92 C, C \xe2\x86\x92 B}\n\n\xef\xbf\xbd G = {A \xe2\x86\x92 B, B \xe2\x86\x92 C, C \xe2\x86\x92 A}\n\nA B\n\nC\n\nA B\n\nC\n\nA B\n\nC\n\nCan you find more ?\n20\n\nComputing a Canonical Cover\n\nThis example shows the order of steps 2 and 3 is important!\n\nR= {A,B,C,D} with F = { ABC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C } \n\n1. (step 3; step 2): Doing step 3 first, no FD is redundant  (Why?)\n\nIn step 2, ABC \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D is left reduced to AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D. No more changes.\n\nWe thus obtain G = { AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C } which is equivalent \n\nto F but is not minimal! (The red FD is redundant!).\n\n2. (step 2; step 3): Following our algorithm, in step 2 we get G above. In \n\nstep 3, we remove the redundant FD in G. \n\nThis yields { AB \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, D \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C} which is equivalent to F and minimal.\n21\n\nHow to Deal with Redundancy?\n\nName Address RepresentingFirm SpokesPerson\n\nCarrie Fisher 123 Maple Star One Joe Smith\n\nHarrison Ford 789 Palm dr. Star One Joe Smith\n\nMark Hamill 456 Oak rd. Movies & Co Mary Johns \n\nRelation Instance:\n\nRelation Schema:\n\nStar (name, address, representingFirm, spokesPerson)\n\n\xef\xbf\xbd We can decompose this relation into two smaller relations\n\nF = { name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address, representingFirm, spokePerson,\n\nrepresentingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }\n\n22\n\nHow to Deal with Redundancy?\n\nGiven the relation schema below:\n\nStar (name, address, representingFirm, spokesperson) with\n\nDecompose Star into the following 2 relations:\n\nStar (name, address, representingFirm)\n\nwith F1={ name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address,representingFirm }\n\nand\n\nFirm (representingFirm, spokesPerson)\n\nwith F2= { representingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }\n\nF = {name \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 address, representingFirm, spokePerson\n\nrepresentingFirm \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 spokesPerson }\n\n23\n\nHow to Deal with Redundancy?\n\nName Address RepresentingFirm Spokesperson \n\nCarrie Fisher 123 Maple Star One Joe Smith\n\nHarrison Ford 789 Palm dr. Star One Joe Smith\n\nMark Hamill 456 Oak rd. Movies & Co Mary Johns \n\nInstance of Star before decomposition:\n\nName Address RepresentingFirm\n\nCarrie Fisher 123 Maple Star One\n\nHarrison Ford 789 Palm dr. Star One\n\nMark Hamill 456 Oak rd. Movies & Co\n\nThe instance after the decomposition:\n\nRepresentingFirm Spokesperson \n\nStar One Joe Smith\n\nMovies & Co Mary Johns \n\n24\n\n\n\n3/18/2019\n\n5\n\nDecomposition\n\n\xef\xbf\xbd A decomposition of a relation schema R is obtained by splitting R\ninto two or more relations, denoted as R = {R1,\xe2\x80\xa6,Rm}. Formally, R is \na decomposition of R if the following two conditions hold:\n\n1. No attribute of R is lost or introduced (i.e., R1\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x80\xa6\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaaRm= R)\n\n2. No schema Ri is a subset or equal to any relation Rj (for i \xe2\x89\xa0 j)\n\n\xef\xbf\xbd When m = 2, the decomposition R = { R1, R2 } is called binary\n\n\xef\xbf\xbd Not every decomposition of R is \xe2\x80\x9cdesirable\xe2\x80\x9d. Why?\n\n\xef\xbf\xbd Properties of a decomposition?\n(1) Lossless-join \xe2\x80\x93 this is a must\n\n(2) Dependency-preserving \xe2\x80\x93 this is desirable\n\nExplanation follows \xe2\x80\xa6\n\n25\n\nExample\nRelation Instance: Decomposed into:\n\nB C\n\n2 3\n\n2 5\n\nA B C\n\n1 2 3\n\n4 2 5\n\nA B\n\n1 2\n\n4 2\n\nTo \xe2\x80\x9crecover\xe2\x80\x9d information, we join the relations:\n\nA B C\n\n1 2 3\n\n4 2 5\n\n4 2 3\n\n1 2 5\n\nWhy do we got new tuples?\n\n26\n\nLossless-Join Decomposition\n\n\xef\xbf\xbd Suppose R is a relation and F is a set of FD\xe2\x80\x99s over R. \n\nA binary decomposition of R into relation schemas R1 and \n\nR2 with attribute sets X and Y is said to be a lossless-join \n\ndecomposition with respect to F, if for every instance r of \n\nR that satisfies F, it holds that \xcf\x80\xcf\x80\xcf\x80\xcf\x80X( r )\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd\xef\xbf\xbd \xcf\x80\xcf\x80\xcf\x80\xcf\x80Y( r ) = r\n\n\xef\xbf\xbd Thm: Let R be a relation schema and F a set of FD\xe2\x80\x99s on R. \n\nA binary decomposition of R into R1 and R2 with attribute \n\nsets X and Y is lossless if X \xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9 Y \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 X or X \xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9 Y \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 Y, i.e., \n\nthis binary decomposition is lossless if the common \n\nattributes of X and Y form a key of  R1 or R2\n27\n\nExample: Lossless-join\nRelation Instance: Decomposed into:\n\nB C\n\n2 3\n\nA B C\n\n1 2 3\n\n4 2 3\n\nA B\n\n1 2\n\n4 2\n\nTo recover the original relation r, we join the two relations:\n\nA B C\n\n1 2 3\n\n4 2 3\n\nF = { B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C }\n\nNo new tuples !\n\n28\n\nExample: Dependency Preservation\nRelation Instance:\n\nDecomposed into:\n\nB C D\n\n2 5 7\n\n3 6 8\n\nA B\n\n1 2\n\n4 3\n\nF = { B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 C, B \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D, A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D }A B C D\n\n1 2 5 7\n\n4 3 6 8\n\nCan we enforce A \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 D?\n\nHow ?\n29\n\nDependency-Preserving Decomposition\n\n\xef\xbf\xbd A dependency-preserving decomposition allows us to enforce \n\nevery  FD (on each insertion of a tuple or when modifying a tuple) \n\nby examining just one single relation instance\n\n\xef\xbf\xbd Let R be a relation schema that is decomposed into two schemas \n\nwith attribute sets X and Y, and let F be a set of FD\xe2\x80\x99s over R. The \n\nprojection of F on X (denoted by FX) is the set of FD\xe2\x80\x99s in  F\n+ that \n\nfollow from F and involve only attributes in X\n\n\xef\xbf\xbd Recall that a FD U \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 V in F+ is in FX if all the attributes in U\n\nand V are in X; In this case, we say this FD is \xe2\x80\x9crelevant\xe2\x80\x9d to X\n\n\xef\xbf\xbd The decomposition of < R, F > into two schemas with attribute sets \n\nX and Y is dependency-preserving if ( FX \xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa FY )\n+ \xe2\x89\xa1 F+\n\n30\n\n\n\n3/18/2019\n\n6\n\nNormal Forms\n\n\xef\xbf\xbd Given a relation schema R, we must be able to determine \n\nwhether it is \xe2\x80\x9cgood\xe2\x80\x9d or we need to decompose it into \n\nsmaller relations, and if so, how?\n\n\xef\xbf\xbd To address these issues, we need to study normal forms\n\n\xef\xbf\xbd If a relation schema is in one of these normal forms, we \n\nknow that it is in some \xe2\x80\x9cgood\xe2\x80\x9d shape in the sense that \ncertain kinds of problems (related to redundancy) cannot arise\n\n31\n\n1NF2NF3NFBCNF\n\nNormal Forms\n\n\xef\xbf\xbd The normal forms based on FD\xe2\x80\x99s are\n\xef\xbf\xbd First normal form (1NF)\n\n\xef\xbf\xbd Second normal form (2NF)\n\n\xef\xbf\xbd Third normal form (3NF)\n\n\xef\xbf\xbd Boyce-Codd normal form (BCNF)\n\n\xef\xbf\xbd These normal forms have increasingly restrictive \nrequirements\n\n32\n\nThird Normal Form (3NF)\n\nLet R be a relation schema, F a set of FD\xe2\x80\x99s on R, X\xe2\x8a\x86 R, and  \n\nA \xe2\x88\x88 R. \n\n\xef\xbf\xbd We say R w.r.t. F is in 3NF (third normal form), if for every \nFD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in F, at least one of the following conditions holds:\n\n\xef\xbf\xbd A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X, that is, X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is a trivial FD, or\n\n\xef\xbf\xbd X is a superkey, or\n\n\xef\xbf\xbd If X is not a key, then A is part of some key of R\n\n\xef\xbf\xbd To determine if a relation <R, F> is in 3NF:\n\n\xef\xbf\xbd We check whether the LHS of each nontrivial FD in F is a superkey\n\n\xef\xbf\xbd If not, we check whether its RHS is part of any key of R\n33\n\nBoyce-Codd Normal Form\n\nLet R be a relation schema, F a set of FD\xe2\x80\x99s on R, X \xe2\x8a\x86 R, and  \n\nA \xe2\x88\x88 R.\n\n\xef\xbf\xbd We say R w.r.t. F is in Boyce-Codd normal form, if for every \n\nFD X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A in F, at least one of the following conditions holds:\n\n\xef\xbf\xbd A \xe2\x88\x88\xe2\x88\x88\xe2\x88\x88\xe2\x88\x88 X, that is, X \xe2\x86\x92\xe2\x86\x92\xe2\x86\x92\xe2\x86\x92 A is a trivial FD, or\n\n\xef\xbf\xbd X is a superkey\n\n\xef\xbf\xbd To determine whether R with a given set of FD\xe2\x80\x99s F is in BCNF \n\n\xef\xbf\xbd Check whether the LHS X of each nontrivial FD in F is a superkey\n\n\xe2\x80\xa2 How? Simply compute X+ (w.r.t. F) and check if X+ = R\n\n34\n\n\n'