b'Microsoft PowerPoint - DB8.ppt [Compatibility Mode]1COMP353 DatabasesMore on SQL QueriesSQL Queries: Review\xef\xbf\xbd SQL query has a formSELECT . . .FROM . . .WHERE . . . ;\xef\xbf\xbd The SELECT clause says which Attribute(s) we are interested in\xef\xbf\xbd The FROM clause says which Relation(s) we refer to\xef\xbf\xbd The WHERE clause says which Tuple(s) we refer toCase Insensitivity \xef\xbf\xbd SQL is case insensitive\xef\xbf\xbd So, keyword FROM maybe written as:\xef\xbf\xbd FROM  or\xef\xbf\xbd From   or\xef\xbf\xbd FrOm \xef\xbf\xbd Only in strings, SQL distinguishes between uppercase and the lowercase letters\xef\xbf\xbd So, the following are different strings:\xe2\x80\xa2 \xe2\x80\x99FROM\xe2\x80\x99\xe2\x80\xa2 \xe2\x80\x99From\xe2\x80\x99\xe2\x80\xa2 \xe2\x80\x99FrOm\xe2\x80\x99Select Clause \xef\xbf\xbd In place of * in the SELECT clause, we can put any attribute \xe2\x80\x9cwe wish\xe2\x80\x9d to project on\xef\xbf\xbd In the SELECT clause, we can also do renamingSELECT title AS name, length AS durationFROM Movie;\xef\xbf\xbd the structure of the query output \xe2\x80\x9cappears as\xe2\x80\x9d:(name, duration)Select Clause \xef\xbf\xbd We can also use a formula in place of an attributeSELECT title AS name, length/60 AS lengthInHoursFROM Movie;\xef\xbf\xbd the structure of the output: (name, lengthInHours)Select Clause \xef\xbf\xbd SQL even allows using a constant as an item in the SELECT clause, as shown below.SELECT title AS name, length/60 AS length, \xe2\x80\x99hrs.\xe2\x80\x99 AS inHoursFROMMovie;\xef\xbf\xbdThe structure of the output: (name,                     length,   inHours)Gone with the wind 1.98       hrs.King Kong 0.75       hrs.\xef\xbf\xbd Why? To put some \xe2\x80\x9cuseful\xe2\x80\x9d words into the output that SQL displays 2Comparison of Strings \xef\xbf\xbd Two strings are equal if they have the same sequence of characters/symbols\xef\xbf\xbd Strings are compared alphabetically\xef\xbf\xbd \xe2\x80\x99fodder\xe2\x80\x99 < \xe2\x80\x99foo\xe2\x80\x99\xef\xbf\xbd \xe2\x80\x99bar\xe2\x80\x99 < \xe2\x80\x99bargain\xe2\x80\x99\xef\xbf\xbd WHERE R.A = T.B AND s LIKE p\xef\xbf\xbd s is an attribute of type string and p is a pattern; e.g. WHERE title LIKE \xe2\x80\x99Gone%\xe2\x80\x99\xef\xbf\xbd \xe2\x80\x9cOrdinary\xe2\x80\x9d characters in p matches ordinary characters in s\xef\xbf\xbd What about \xe2\x80\x9cSpecial\xe2\x80\x9d characters in p:  % , _\xef\xbf\xbd \xe2\x80\x9c%\xe2\x80\x9d in p matches any sequence of zero or more characters in s\xef\xbf\xbd \xe2\x80\x9c_\xe2\x80\x9d in p matches any one character in sComparison of Strings \xef\xbf\xbd Suppose we remember a movie \xe2\x80\x9cStar something\xe2\x80\x9d, and we do remember that \xe2\x80\x9cthe something\xe2\x80\x9d has four lettersSELECT titleFROMMovieWHERE title LIKE \xe2\x80\x99Star _ _ _ _\xe2\x80\x99;SELECT titleFROMMovieWHERE title LIKE \xe2\x80\x99Star%\xe2\x80\x99;Comparison of Strings What if the pattern p includes \xe2\x80\x99, %, or _?\xef\xbf\xbd Find all movies with a possessive ( \xe2\x80\x99s ) in their titleLIKE \xe2\x80\x99%\xe2\x80\x99s%\xe2\x80\x99SELECT titleFROMMovieWHERE title LIKE \xe2\x80\x99%\xe2\x80\x99\xe2\x80\x99s%\xe2\x80\x99;\xef\xbf\xbd The convention is that two apostrophes \xe2\x80\x99\xe2\x80\x99 in a string represent one single apostrophe (\xe2\x80\x99), and not the end of stringComparison of Strings \xef\xbf\xbd What if p involves the special characters % or _? \xef\xbf\xbd We should \xe2\x80\x9cescape\xe2\x80\x9d their special meaning using \xe2\x80\x9csome\xe2\x80\x9d escape character\xef\xbf\xbd SQL allows using any character as escape character\xef\xbf\xbd s LIKE \xe2\x80\x99x%%x%\xe2\x80\x99 ESCAPE \xe2\x80\x99x\xe2\x80\x99;  \xef\xbf\xbd Here, x is the escape character \xef\xbf\xbd x% means the character %, and not its usual meaning (the special character)\xef\xbf\xbd The pattern \xe2\x80\x99x%%x%\xe2\x80\x99 matches strings: %whatever%Ordering the Ouput\xef\xbf\xbd We may wish the output of a query to be displayed in some order. This could be done using the SQL clause: \xef\xbf\xbd ORDER BY <list of attributes>\xef\xbf\xbd E.g., List Disney movies in 1990 by their length, shortest first, and then by the alphabetical order of the titles:SELECT *FROMMovieWHERE studioName = \xe2\x80\x99Disney\xe2\x80\x99 AND year = 1990ORDER BY length, title;\xef\xbf\xbd Default ordering is ASCending, unless we use the DESC keyword\xef\xbf\xbd Ties are broken by the \xe2\x80\x9cnext\xe2\x80\x9d attribute in the ORDER BY list.Products and Joins \xef\xbf\xbd SQL has a simple way to couple relations in a query\xef\xbf\xbd How? Simply list each relation in the FROM clause\xef\xbf\xbd All the relations in the FROM clause are coupled through Cartesian product\xef\xbf\xbd Then we can put conditions in the WHERE clause in order to get a desired kind of join3Join (Example, Recall)\xef\xbf\xbd Relation schemas:Movie (title, year, length, filmType)Owns (title, year, studioName)\xef\xbf\xbd Query:Find titles and lengths of all movies produced by Disney\xef\xbf\xbd Query in SQL:SELECT Movie.title, Movie.lengthFROMMovie, OwnsWHERE Movie.title = Owns.title AND Movie.year = Owns.year AND Owns.studioName = \xe2\x80\x99Disney\xe2\x80\x99;Union, Intersection, and Difference\xef\xbf\xbd We can apply the common set operations of union, intersection, and difference to relations R and S, if they are compatible. \xef\xbf\xbd When the output of two or more SQL queries are compatible, we may \xe2\x80\x9ccombine\xe2\x80\x9d the queries using:\xef\xbf\xbd UNION\xef\xbf\xbd INTERSECT\xef\xbf\xbd EXCEPT  (or MINUS in Oracle)Union, Intersection, and Difference\xef\xbf\xbd Relation schemas:Movie ( title, year, length, filmType)StarsIn (title, year, starName)\xef\xbf\xbd Query:Find titles and years of movies that appeared in either Movie orStarsIn relations\xef\xbf\xbd Query in SQL:SELECT title, year FROMMovieUNIONSELECT title, year FROM StarsIn;Union, Intersection, and Difference\xef\xbf\xbd Relation schemas:Star(name, address, gender, birthdate)Exec(name, address, cert#, netWorth)\xef\xbf\xbd Query:Find names and addresses of all female movie stars who are also movie executives with a net worth of over $10,000,000\xef\xbf\xbd Query in SQL:SELECT name, addressFROM StarWHERE gender = \xe2\x80\x99F\xe2\x80\x99INTERSECTSELECT name, addressFROM ExecWHERE netWorth > 10000000;Union, Intersection, and Difference\xef\xbf\xbd Relation schemas:Star (name, address, gender, birthdate)Exec (name, address, cert#, netWorth)\xef\xbf\xbd Query:Find names and addresses of movie stars who are not movie executives\xef\xbf\xbd Query in SQL:SELECT name, addressFROM StarEXCEPT                   //or MINUS in Oracle//SELECT name, addressFROM Exec;Duplicate EliminationNote that in SQL:\xef\xbf\xbd The union, intersection, and difference operations normally eliminate duplicates (the set semantics)\xef\xbf\xbd To retain duplicates, hence preventing duplicate elimination, we must use the keyword ALL after the operator UNION, INTERSECT, and EXCEPT\xef\xbf\xbd R UNION ALL S (the only bag operation supported in Oracle) \xef\xbf\xbd R INTERSECT ALL S\xef\xbf\xbd R EXCEPT ALL S4Retaining Duplicates\xef\xbf\xbd R UNION ALL S\xef\xbf\xbd The bag of elements that are in R, S, or in both. If R is a bag in which tuple tappears n times, and S is a bag in which t appears m times, then the number of occurrences of tuple t in bag R \xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa\xe2\x88\xaa S is n + m\xef\xbf\xbd R INTERSECT ALL S\xef\xbf\xbd The bag of elements that are in both R and S. If R is a bag in which tuple tappears n times, and S is a bag in which t appears m times, then the number of occurrences of t in bag R \xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9\xe2\x88\xa9 S is min(n,m)\xef\xbf\xbd R EXCEPT ALL S\xef\xbf\xbd The bag of elements that are in R but not in S. If R is a bag in which tuple tappears n times, and S is a bag in which t appears m times, then the number of occurrences of t in bag R \xe2\x88\x92\xe2\x88\x92\xe2\x88\x92\xe2\x88\x92 S is max(0, n - m)Retaining Duplicates in Union\xef\xbf\xbd Relation schemas:Movie ( title, year, length, filmType)StarsIn (title, year, starName)\xef\xbf\xbd Query:List the title and year of every movie that appears in Movie or StarsIn\xef\xbf\xbd Query in SQL:SELECT title, year FROMMovieUNION ALLSELECT title, year FROM StarsIn;'